
mc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003278  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c4  00800060  00003278  0000330c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800124  00800124  000033d0  2**0
                  ALLOC
  3 .stab         0000285c  00000000  00000000  000033d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ce8  00000000  00000000  00005c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000880d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000096f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a4a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a608  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a895  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b063  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 32       	cpi	r26, 0x24	; 36
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e2       	ldi	r26, 0x24	; 36
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 32       	cpi	r26, 0x25	; 37
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b8 06 	call	0xd70	; 0xd70 <main>
      8a:	0c 94 3a 19 	jmp	0x3274	; 0x3274 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e1       	ldi	r26, 0x1C	; 28
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ca 18 	jmp	0x3194	; 0x3194 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ca 18 	jmp	0x3194	; 0x3194 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c e1       	ldi	r24, 0x1C	; 28
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ca 18 	jmp	0x3194	; 0x3194 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ca 18 	jmp	0x3194	; 0x3194 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ca 18 	jmp	0x3194	; 0x3194 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <KeyPad_getPressedKey+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     b50:	1a 82       	std	Y+2, r1	; 0x02
     b52:	4c c0       	rjmp	.+152    	; 0xbec <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     b54:	ea e3       	ldi	r30, 0x3A	; 58
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	80 e1       	ldi	r24, 0x10	; 16
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <KeyPad_getPressedKey+0x22>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	2a 95       	dec	r18
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <KeyPad_getPressedKey+0x1e>
     b6c:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 2e       	mov	r0, r18
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <KeyPad_getPressedKey+0x3e>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <KeyPad_getPressedKey+0x3a>
     b88:	80 95       	com	r24
     b8a:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	28 c0       	rjmp	.+80     	; 0xbe0 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
     b90:	e9 e3       	ldi	r30, 0x39	; 57
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <KeyPad_getPressedKey+0x62>
     ba4:	55 95       	asr	r21
     ba6:	47 95       	ror	r20
     ba8:	8a 95       	dec	r24
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <KeyPad_getPressedKey+0x5e>
     bac:	ca 01       	movw	r24, r20
     bae:	81 70       	andi	r24, 0x01	; 1
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	91 f4       	brne	.+36     	; 0xbda <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	98 2f       	mov	r25, r24
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	89 0f       	add	r24, r25
     bca:	8f 5f       	subi	r24, 0xFF	; 255
     bcc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	8f 5f       	subi	r24, 0xFF	; 255
     bde:	89 83       	std	Y+1, r24	; 0x01
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	84 30       	cpi	r24, 0x04	; 4
     be4:	a8 f2       	brcs	.-86     	; 0xb90 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	8a 83       	std	Y+2, r24	; 0x02
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	84 30       	cpi	r24, 0x04	; 4
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <KeyPad_getPressedKey+0xae>
     bf2:	b0 cf       	rjmp	.-160    	; 0xb54 <KeyPad_getPressedKey+0xe>
     bf4:	ad cf       	rjmp	.-166    	; 0xb50 <KeyPad_getPressedKey+0xa>

00000bf6 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <KeyPad_4x4_adjustKeyNumber+0x6>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <KeyPad_4x4_adjustKeyNumber+0x8>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	3c 83       	std	Y+4, r19	; 0x04
     c0c:	2b 83       	std	Y+3, r18	; 0x03
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	88 30       	cpi	r24, 0x08	; 8
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <KeyPad_4x4_adjustKeyNumber+0x24>
     c18:	70 c0       	rjmp	.+224    	; 0xcfa <KeyPad_4x4_adjustKeyNumber+0x104>
     c1a:	2b 81       	ldd	r18, Y+3	; 0x03
     c1c:	3c 81       	ldd	r19, Y+4	; 0x04
     c1e:	29 30       	cpi	r18, 0x09	; 9
     c20:	31 05       	cpc	r19, r1
     c22:	5c f5       	brge	.+86     	; 0xc7a <KeyPad_4x4_adjustKeyNumber+0x84>
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <KeyPad_4x4_adjustKeyNumber+0x3a>
     c2e:	59 c0       	rjmp	.+178    	; 0xce2 <KeyPad_4x4_adjustKeyNumber+0xec>
     c30:	2b 81       	ldd	r18, Y+3	; 0x03
     c32:	3c 81       	ldd	r19, Y+4	; 0x04
     c34:	25 30       	cpi	r18, 0x05	; 5
     c36:	31 05       	cpc	r19, r1
     c38:	9c f4       	brge	.+38     	; 0xc60 <KeyPad_4x4_adjustKeyNumber+0x6a>
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	91 05       	cpc	r25, r1
     c42:	09 f4       	brne	.+2      	; 0xc46 <KeyPad_4x4_adjustKeyNumber+0x50>
     c44:	48 c0       	rjmp	.+144    	; 0xcd6 <KeyPad_4x4_adjustKeyNumber+0xe0>
     c46:	2b 81       	ldd	r18, Y+3	; 0x03
     c48:	3c 81       	ldd	r19, Y+4	; 0x04
     c4a:	23 30       	cpi	r18, 0x03	; 3
     c4c:	31 05       	cpc	r19, r1
     c4e:	0c f0       	brlt	.+2      	; 0xc52 <KeyPad_4x4_adjustKeyNumber+0x5c>
     c50:	45 c0       	rjmp	.+138    	; 0xcdc <KeyPad_4x4_adjustKeyNumber+0xe6>
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <KeyPad_4x4_adjustKeyNumber+0x68>
     c5c:	39 c0       	rjmp	.+114    	; 0xcd0 <KeyPad_4x4_adjustKeyNumber+0xda>
     c5e:	67 c0       	rjmp	.+206    	; 0xd2e <KeyPad_4x4_adjustKeyNumber+0x138>
     c60:	2b 81       	ldd	r18, Y+3	; 0x03
     c62:	3c 81       	ldd	r19, Y+4	; 0x04
     c64:	26 30       	cpi	r18, 0x06	; 6
     c66:	31 05       	cpc	r19, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <KeyPad_4x4_adjustKeyNumber+0x76>
     c6a:	41 c0       	rjmp	.+130    	; 0xcee <KeyPad_4x4_adjustKeyNumber+0xf8>
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	87 30       	cpi	r24, 0x07	; 7
     c72:	91 05       	cpc	r25, r1
     c74:	0c f0       	brlt	.+2      	; 0xc78 <KeyPad_4x4_adjustKeyNumber+0x82>
     c76:	3e c0       	rjmp	.+124    	; 0xcf4 <KeyPad_4x4_adjustKeyNumber+0xfe>
     c78:	37 c0       	rjmp	.+110    	; 0xce8 <KeyPad_4x4_adjustKeyNumber+0xf2>
     c7a:	2b 81       	ldd	r18, Y+3	; 0x03
     c7c:	3c 81       	ldd	r19, Y+4	; 0x04
     c7e:	2c 30       	cpi	r18, 0x0C	; 12
     c80:	31 05       	cpc	r19, r1
     c82:	09 f4       	brne	.+2      	; 0xc86 <KeyPad_4x4_adjustKeyNumber+0x90>
     c84:	46 c0       	rjmp	.+140    	; 0xd12 <KeyPad_4x4_adjustKeyNumber+0x11c>
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	8d 30       	cpi	r24, 0x0D	; 13
     c8c:	91 05       	cpc	r25, r1
     c8e:	5c f4       	brge	.+22     	; 0xca6 <KeyPad_4x4_adjustKeyNumber+0xb0>
     c90:	2b 81       	ldd	r18, Y+3	; 0x03
     c92:	3c 81       	ldd	r19, Y+4	; 0x04
     c94:	2a 30       	cpi	r18, 0x0A	; 10
     c96:	31 05       	cpc	r19, r1
     c98:	b1 f1       	breq	.+108    	; 0xd06 <KeyPad_4x4_adjustKeyNumber+0x110>
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	8b 30       	cpi	r24, 0x0B	; 11
     ca0:	91 05       	cpc	r25, r1
     ca2:	a4 f5       	brge	.+104    	; 0xd0c <KeyPad_4x4_adjustKeyNumber+0x116>
     ca4:	2d c0       	rjmp	.+90     	; 0xd00 <KeyPad_4x4_adjustKeyNumber+0x10a>
     ca6:	2b 81       	ldd	r18, Y+3	; 0x03
     ca8:	3c 81       	ldd	r19, Y+4	; 0x04
     caa:	2e 30       	cpi	r18, 0x0E	; 14
     cac:	31 05       	cpc	r19, r1
     cae:	b9 f1       	breq	.+110    	; 0xd1e <KeyPad_4x4_adjustKeyNumber+0x128>
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	8e 30       	cpi	r24, 0x0E	; 14
     cb6:	91 05       	cpc	r25, r1
     cb8:	7c f1       	brlt	.+94     	; 0xd18 <KeyPad_4x4_adjustKeyNumber+0x122>
     cba:	2b 81       	ldd	r18, Y+3	; 0x03
     cbc:	3c 81       	ldd	r19, Y+4	; 0x04
     cbe:	2f 30       	cpi	r18, 0x0F	; 15
     cc0:	31 05       	cpc	r19, r1
     cc2:	79 f1       	breq	.+94     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x12c>
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	80 31       	cpi	r24, 0x10	; 16
     cca:	91 05       	cpc	r25, r1
     ccc:	69 f1       	breq	.+90     	; 0xd28 <KeyPad_4x4_adjustKeyNumber+0x132>
     cce:	2f c0       	rjmp	.+94     	; 0xd2e <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
     cd0:	97 e0       	ldi	r25, 0x07	; 7
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	2e c0       	rjmp	.+92     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
     cd6:	28 e0       	ldi	r18, 0x08	; 8
     cd8:	2a 83       	std	Y+2, r18	; 0x02
     cda:	2b c0       	rjmp	.+86     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
     cdc:	39 e0       	ldi	r19, 0x09	; 9
     cde:	3a 83       	std	Y+2, r19	; 0x02
     ce0:	28 c0       	rjmp	.+80     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
     ce2:	85 e2       	ldi	r24, 0x25	; 37
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	25 c0       	rjmp	.+74     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
     ce8:	94 e0       	ldi	r25, 0x04	; 4
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	22 c0       	rjmp	.+68     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
     cee:	25 e0       	ldi	r18, 0x05	; 5
     cf0:	2a 83       	std	Y+2, r18	; 0x02
     cf2:	1f c0       	rjmp	.+62     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
     cf4:	36 e0       	ldi	r19, 0x06	; 6
     cf6:	3a 83       	std	Y+2, r19	; 0x02
     cf8:	1c c0       	rjmp	.+56     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     cfa:	8a e2       	ldi	r24, 0x2A	; 42
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	19 c0       	rjmp	.+50     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	16 c0       	rjmp	.+44     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
     d06:	22 e0       	ldi	r18, 0x02	; 2
     d08:	2a 83       	std	Y+2, r18	; 0x02
     d0a:	13 c0       	rjmp	.+38     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
     d0c:	33 e0       	ldi	r19, 0x03	; 3
     d0e:	3a 83       	std	Y+2, r19	; 0x02
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     d12:	8d e2       	ldi	r24, 0x2D	; 45
     d14:	8a 83       	std	Y+2, r24	; 0x02
     d16:	0d c0       	rjmp	.+26     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
     d18:	9d e0       	ldi	r25, 0x0D	; 13
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	0a c0       	rjmp	.+20     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
     d1e:	1a 82       	std	Y+2, r1	; 0x02
     d20:	08 c0       	rjmp	.+16     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     d22:	2d e3       	ldi	r18, 0x3D	; 61
     d24:	2a 83       	std	Y+2, r18	; 0x02
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     d28:	3b e2       	ldi	r19, 0x2B	; 43
     d2a:	3a 83       	std	Y+2, r19	; 0x02
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	8a 83       	std	Y+2, r24	; 0x02
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <__vector_6>:
#define OK 0x09

uint8 g_tick=0;             //Global Variable To Get Number of Ticks

ISR(TIMER1_COMPA_vect)      // ISR For Timer1 To increment Tick
{
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
     d4c:	8f 93       	push	r24
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     d56:	80 91 24 01 	lds	r24, 0x0124
     d5a:	8f 5f       	subi	r24, 0xFF	; 255
     d5c:	80 93 24 01 	sts	0x0124, r24

}
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	8f 91       	pop	r24
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0f 90       	pop	r0
     d6c:	1f 90       	pop	r1
     d6e:	18 95       	reti

00000d70 <main>:


int main(void) //start main
{
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	ca 5c       	subi	r28, 0xCA	; 202
     d7e:	d0 40       	sbci	r29, 0x00	; 0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61

	uint8 key;                 		//TO Get The Pressed Key From KeyPad
	uint8 i;				   		//Counter For loops
	uint8 Conifirmation_flag = 0;   //This Flag is Set When Confirmation For PW Done
     d8a:	fe 01       	movw	r30, r28
     d8c:	e7 54       	subi	r30, 0x47	; 71
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	10 82       	st	Z, r1
	uint8 done_flag=0;				//Sensitive Case To Enter while loop for Two Scenarios
     d92:	fe 01       	movw	r30, r28
     d94:	e8 54       	subi	r30, 0x48	; 72
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	10 82       	st	Z, r1
	uint8 error1_counter=0;			//This Flag is Set When The User Enter Wrong PW
     d9a:	fe 01       	movw	r30, r28
     d9c:	e9 54       	subi	r30, 0x49	; 73
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	10 82       	st	Z, r1
	uint8 NewPW[5];					//Array For New PASSWORD TO Be sent TO Mc2 Using UART
	uint8 pwback[5];				//Array Of PW Sent By EEPROM From Mc2
	uint8 password[5];				//User Password To be Compared With PwBack[5]

	LCD_init();						//Initialization For LCD
     da2:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_init>
	UART_init();					//Initialization For UART
     da6:	0e 94 12 18 	call	0x3024	; 0x3024 <UART_init>

	LCD_clearScreen();				//Clear LCD Screen
     daa:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
	LCD_displayString("PLZ ENTER NEW PW");  //Display String on LCD
     dae:	80 e6       	ldi	r24, 0x60	; 96
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
	LCD_goToRowColumn(1,0);
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	0e 94 42 17 	call	0x2e84	; 0x2e84 <LCD_goToRowColumn>
	UART_sendByte(WRITE_IN_EEPROM);      //Send TO Mc2 request To Write In EEPROM
     dbe:	83 e0       	ldi	r24, 0x03	; 3
     dc0:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>

	for(i = 0 ; i < 5 ; i++)
     dc4:	fe 01       	movw	r30, r28
     dc6:	e6 54       	subi	r30, 0x46	; 70
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	10 82       	st	Z, r1
     dcc:	dc c0       	rjmp	.+440    	; 0xf86 <main+0x216>
	{
		key = KeyPad_getPressedKey();    //get the Pressed Key from Keypad
     dce:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
     dd2:	fe 01       	movw	r30, r28
     dd4:	e5 54       	subi	r30, 0x45	; 69
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	80 83       	st	Z, r24
		if((key >= 0) && (key <= 9))
     dda:	fe 01       	movw	r30, r28
     ddc:	e5 54       	subi	r30, 0x45	; 69
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	80 81       	ld	r24, Z
     de2:	8a 30       	cpi	r24, 0x0A	; 10
     de4:	a0 f4       	brcc	.+40     	; 0xe0e <main+0x9e>
		{
			NewPW[i] = key;              //Saving The Key into NewPW Array To be sent
     de6:	fe 01       	movw	r30, r28
     de8:	e6 54       	subi	r30, 0x46	; 70
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	80 81       	ld	r24, Z
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	ce 01       	movw	r24, r28
     df4:	84 54       	subi	r24, 0x44	; 68
     df6:	9f 4f       	sbci	r25, 0xFF	; 255
     df8:	dc 01       	movw	r26, r24
     dfa:	a2 0f       	add	r26, r18
     dfc:	b3 1f       	adc	r27, r19
     dfe:	fe 01       	movw	r30, r28
     e00:	e5 54       	subi	r30, 0x45	; 69
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	80 81       	ld	r24, Z
     e06:	8c 93       	st	X, r24
			LCD_displayCharacter('#');   //display PW using #
     e08:	83 e2       	ldi	r24, 0x23	; 35
     e0a:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <LCD_displayCharacter>
     e0e:	fe 01       	movw	r30, r28
     e10:	ed 54       	subi	r30, 0x4D	; 77
     e12:	ff 4f       	sbci	r31, 0xFF	; 255
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	a8 ec       	ldi	r26, 0xC8	; 200
     e1a:	b2 e4       	ldi	r27, 0x42	; 66
     e1c:	80 83       	st	Z, r24
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	a2 83       	std	Z+2, r26	; 0x02
     e22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e24:	8e 01       	movw	r16, r28
     e26:	01 55       	subi	r16, 0x51	; 81
     e28:	1f 4f       	sbci	r17, 0xFF	; 255
     e2a:	fe 01       	movw	r30, r28
     e2c:	ed 54       	subi	r30, 0x4D	; 77
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	60 81       	ld	r22, Z
     e32:	71 81       	ldd	r23, Z+1	; 0x01
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	93 81       	ldd	r25, Z+3	; 0x03
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	4a ef       	ldi	r20, 0xFA	; 250
     e3e:	54 e4       	ldi	r21, 0x44	; 68
     e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	f8 01       	movw	r30, r16
     e4a:	80 83       	st	Z, r24
     e4c:	91 83       	std	Z+1, r25	; 0x01
     e4e:	a2 83       	std	Z+2, r26	; 0x02
     e50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e52:	fe 01       	movw	r30, r28
     e54:	e1 55       	subi	r30, 0x51	; 81
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	60 81       	ld	r22, Z
     e5a:	71 81       	ldd	r23, Z+1	; 0x01
     e5c:	82 81       	ldd	r24, Z+2	; 0x02
     e5e:	93 81       	ldd	r25, Z+3	; 0x03
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e8       	ldi	r20, 0x80	; 128
     e66:	5f e3       	ldi	r21, 0x3F	; 63
     e68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e6c:	88 23       	and	r24, r24
     e6e:	44 f4       	brge	.+16     	; 0xe80 <main+0x110>
		__ticks = 1;
     e70:	fe 01       	movw	r30, r28
     e72:	e3 55       	subi	r30, 0x53	; 83
     e74:	ff 4f       	sbci	r31, 0xFF	; 255
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	80 83       	st	Z, r24
     e7e:	64 c0       	rjmp	.+200    	; 0xf48 <main+0x1d8>
	else if (__tmp > 65535)
     e80:	fe 01       	movw	r30, r28
     e82:	e1 55       	subi	r30, 0x51	; 81
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	60 81       	ld	r22, Z
     e88:	71 81       	ldd	r23, Z+1	; 0x01
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	3f ef       	ldi	r19, 0xFF	; 255
     e92:	4f e7       	ldi	r20, 0x7F	; 127
     e94:	57 e4       	ldi	r21, 0x47	; 71
     e96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e9a:	18 16       	cp	r1, r24
     e9c:	0c f0       	brlt	.+2      	; 0xea0 <main+0x130>
     e9e:	43 c0       	rjmp	.+134    	; 0xf26 <main+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea0:	fe 01       	movw	r30, r28
     ea2:	ed 54       	subi	r30, 0x4D	; 77
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255
     ea6:	60 81       	ld	r22, Z
     ea8:	71 81       	ldd	r23, Z+1	; 0x01
     eaa:	82 81       	ldd	r24, Z+2	; 0x02
     eac:	93 81       	ldd	r25, Z+3	; 0x03
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e2       	ldi	r20, 0x20	; 32
     eb4:	51 e4       	ldi	r21, 0x41	; 65
     eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	8e 01       	movw	r16, r28
     ec0:	03 55       	subi	r16, 0x53	; 83
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	bc 01       	movw	r22, r24
     ec6:	cd 01       	movw	r24, r26
     ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	f8 01       	movw	r30, r16
     ed2:	91 83       	std	Z+1, r25	; 0x01
     ed4:	80 83       	st	Z, r24
     ed6:	1f c0       	rjmp	.+62     	; 0xf16 <main+0x1a6>
     ed8:	fe 01       	movw	r30, r28
     eda:	e5 55       	subi	r30, 0x55	; 85
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	88 ec       	ldi	r24, 0xC8	; 200
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	91 83       	std	Z+1, r25	; 0x01
     ee4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ee6:	fe 01       	movw	r30, r28
     ee8:	e5 55       	subi	r30, 0x55	; 85
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <main+0x180>
     ef4:	fe 01       	movw	r30, r28
     ef6:	e5 55       	subi	r30, 0x55	; 85
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     efe:	de 01       	movw	r26, r28
     f00:	a3 55       	subi	r26, 0x53	; 83
     f02:	bf 4f       	sbci	r27, 0xFF	; 255
     f04:	fe 01       	movw	r30, r28
     f06:	e3 55       	subi	r30, 0x53	; 83
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	11 96       	adiw	r26, 0x01	; 1
     f12:	9c 93       	st	X, r25
     f14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f16:	fe 01       	movw	r30, r28
     f18:	e3 55       	subi	r30, 0x53	; 83
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	80 81       	ld	r24, Z
     f1e:	91 81       	ldd	r25, Z+1	; 0x01
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	d1 f6       	brne	.-76     	; 0xed8 <main+0x168>
     f24:	27 c0       	rjmp	.+78     	; 0xf74 <main+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f26:	8e 01       	movw	r16, r28
     f28:	03 55       	subi	r16, 0x53	; 83
     f2a:	1f 4f       	sbci	r17, 0xFF	; 255
     f2c:	fe 01       	movw	r30, r28
     f2e:	e1 55       	subi	r30, 0x51	; 81
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	60 81       	ld	r22, Z
     f34:	71 81       	ldd	r23, Z+1	; 0x01
     f36:	82 81       	ldd	r24, Z+2	; 0x02
     f38:	93 81       	ldd	r25, Z+3	; 0x03
     f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	f8 01       	movw	r30, r16
     f44:	91 83       	std	Z+1, r25	; 0x01
     f46:	80 83       	st	Z, r24
     f48:	de 01       	movw	r26, r28
     f4a:	a7 55       	subi	r26, 0x57	; 87
     f4c:	bf 4f       	sbci	r27, 0xFF	; 255
     f4e:	fe 01       	movw	r30, r28
     f50:	e3 55       	subi	r30, 0x53	; 83
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	80 81       	ld	r24, Z
     f56:	91 81       	ldd	r25, Z+1	; 0x01
     f58:	8d 93       	st	X+, r24
     f5a:	9c 93       	st	X, r25
     f5c:	fe 01       	movw	r30, r28
     f5e:	e7 55       	subi	r30, 0x57	; 87
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	80 81       	ld	r24, Z
     f64:	91 81       	ldd	r25, Z+1	; 0x01
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	f1 f7       	brne	.-4      	; 0xf66 <main+0x1f6>
     f6a:	fe 01       	movw	r30, r28
     f6c:	e7 55       	subi	r30, 0x57	; 87
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	80 83       	st	Z, r24
	LCD_clearScreen();				//Clear LCD Screen
	LCD_displayString("PLZ ENTER NEW PW");  //Display String on LCD
	LCD_goToRowColumn(1,0);
	UART_sendByte(WRITE_IN_EEPROM);      //Send TO Mc2 request To Write In EEPROM

	for(i = 0 ; i < 5 ; i++)
     f74:	de 01       	movw	r26, r28
     f76:	a6 54       	subi	r26, 0x46	; 70
     f78:	bf 4f       	sbci	r27, 0xFF	; 255
     f7a:	fe 01       	movw	r30, r28
     f7c:	e6 54       	subi	r30, 0x46	; 70
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	80 81       	ld	r24, Z
     f82:	8f 5f       	subi	r24, 0xFF	; 255
     f84:	8c 93       	st	X, r24
     f86:	fe 01       	movw	r30, r28
     f88:	e6 54       	subi	r30, 0x46	; 70
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	80 81       	ld	r24, Z
     f8e:	85 30       	cpi	r24, 0x05	; 5
     f90:	08 f4       	brcc	.+2      	; 0xf94 <main+0x224>
     f92:	1d cf       	rjmp	.-454    	; 0xdce <main+0x5e>
			NewPW[i] = key;              //Saving The Key into NewPW Array To be sent
			LCD_displayCharacter('#');   //display PW using #
		}
		_delay_ms(100); //new button every 100ms
	}
	if(KeyPad_getPressedKey() == 13)      //When Press ON Key From KeyPad
     f94:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
     f98:	8d 30       	cpi	r24, 0x0D	; 13
     f9a:	09 f0       	breq	.+2      	; 0xf9e <main+0x22e>
     f9c:	dd c0       	rjmp	.+442    	; 0x1158 <main+0x3e8>
	{
		LCD_clearScreen();                //Clear screen
     f9e:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
		LCD_displayString("SAVING YOUR PW");  // display strin on lcd
     fa2:	81 e7       	ldi	r24, 0x71	; 113
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
		for(i = 0 ; i < 5 ; i++)
     faa:	fe 01       	movw	r30, r28
     fac:	e6 54       	subi	r30, 0x46	; 70
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	10 82       	st	Z, r1
     fb2:	cb c0       	rjmp	.+406    	; 0x114a <main+0x3da>
		{
			UART_sendByte(NewPW[i]);          //Send PW to Mc2 By UART
     fb4:	fe 01       	movw	r30, r28
     fb6:	e6 54       	subi	r30, 0x46	; 70
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	80 81       	ld	r24, Z
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	ce 01       	movw	r24, r28
     fc2:	84 54       	subi	r24, 0x44	; 68
     fc4:	9f 4f       	sbci	r25, 0xFF	; 255
     fc6:	fc 01       	movw	r30, r24
     fc8:	e2 0f       	add	r30, r18
     fca:	f3 1f       	adc	r31, r19
     fcc:	80 81       	ld	r24, Z
     fce:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>
     fd2:	fe 01       	movw	r30, r28
     fd4:	eb 55       	subi	r30, 0x5B	; 91
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	a8 ec       	ldi	r26, 0xC8	; 200
     fde:	b2 e4       	ldi	r27, 0x42	; 66
     fe0:	80 83       	st	Z, r24
     fe2:	91 83       	std	Z+1, r25	; 0x01
     fe4:	a2 83       	std	Z+2, r26	; 0x02
     fe6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe8:	8e 01       	movw	r16, r28
     fea:	0f 55       	subi	r16, 0x5F	; 95
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	fe 01       	movw	r30, r28
     ff0:	eb 55       	subi	r30, 0x5B	; 91
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	60 81       	ld	r22, Z
     ff6:	71 81       	ldd	r23, Z+1	; 0x01
     ff8:	82 81       	ldd	r24, Z+2	; 0x02
     ffa:	93 81       	ldd	r25, Z+3	; 0x03
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	4a ef       	ldi	r20, 0xFA	; 250
    1002:	54 e4       	ldi	r21, 0x44	; 68
    1004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	f8 01       	movw	r30, r16
    100e:	80 83       	st	Z, r24
    1010:	91 83       	std	Z+1, r25	; 0x01
    1012:	a2 83       	std	Z+2, r26	; 0x02
    1014:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1016:	fe 01       	movw	r30, r28
    1018:	ef 55       	subi	r30, 0x5F	; 95
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	60 81       	ld	r22, Z
    101e:	71 81       	ldd	r23, Z+1	; 0x01
    1020:	82 81       	ldd	r24, Z+2	; 0x02
    1022:	93 81       	ldd	r25, Z+3	; 0x03
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e8       	ldi	r20, 0x80	; 128
    102a:	5f e3       	ldi	r21, 0x3F	; 63
    102c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1030:	88 23       	and	r24, r24
    1032:	44 f4       	brge	.+16     	; 0x1044 <main+0x2d4>
		__ticks = 1;
    1034:	fe 01       	movw	r30, r28
    1036:	e1 56       	subi	r30, 0x61	; 97
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	91 83       	std	Z+1, r25	; 0x01
    1040:	80 83       	st	Z, r24
    1042:	64 c0       	rjmp	.+200    	; 0x110c <main+0x39c>
	else if (__tmp > 65535)
    1044:	fe 01       	movw	r30, r28
    1046:	ef 55       	subi	r30, 0x5F	; 95
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	60 81       	ld	r22, Z
    104c:	71 81       	ldd	r23, Z+1	; 0x01
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	3f ef       	ldi	r19, 0xFF	; 255
    1056:	4f e7       	ldi	r20, 0x7F	; 127
    1058:	57 e4       	ldi	r21, 0x47	; 71
    105a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    105e:	18 16       	cp	r1, r24
    1060:	0c f0       	brlt	.+2      	; 0x1064 <main+0x2f4>
    1062:	43 c0       	rjmp	.+134    	; 0x10ea <main+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1064:	fe 01       	movw	r30, r28
    1066:	eb 55       	subi	r30, 0x5B	; 91
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	60 81       	ld	r22, Z
    106c:	71 81       	ldd	r23, Z+1	; 0x01
    106e:	82 81       	ldd	r24, Z+2	; 0x02
    1070:	93 81       	ldd	r25, Z+3	; 0x03
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e2       	ldi	r20, 0x20	; 32
    1078:	51 e4       	ldi	r21, 0x41	; 65
    107a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	8e 01       	movw	r16, r28
    1084:	01 56       	subi	r16, 0x61	; 97
    1086:	1f 4f       	sbci	r17, 0xFF	; 255
    1088:	bc 01       	movw	r22, r24
    108a:	cd 01       	movw	r24, r26
    108c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	f8 01       	movw	r30, r16
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	80 83       	st	Z, r24
    109a:	1f c0       	rjmp	.+62     	; 0x10da <main+0x36a>
    109c:	fe 01       	movw	r30, r28
    109e:	e3 56       	subi	r30, 0x63	; 99
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	88 ec       	ldi	r24, 0xC8	; 200
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	91 83       	std	Z+1, r25	; 0x01
    10a8:	80 83       	st	Z, r24
    10aa:	fe 01       	movw	r30, r28
    10ac:	e3 56       	subi	r30, 0x63	; 99
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	80 81       	ld	r24, Z
    10b2:	91 81       	ldd	r25, Z+1	; 0x01
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <main+0x344>
    10b8:	fe 01       	movw	r30, r28
    10ba:	e3 56       	subi	r30, 0x63	; 99
    10bc:	ff 4f       	sbci	r31, 0xFF	; 255
    10be:	91 83       	std	Z+1, r25	; 0x01
    10c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c2:	de 01       	movw	r26, r28
    10c4:	a1 56       	subi	r26, 0x61	; 97
    10c6:	bf 4f       	sbci	r27, 0xFF	; 255
    10c8:	fe 01       	movw	r30, r28
    10ca:	e1 56       	subi	r30, 0x61	; 97
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	80 81       	ld	r24, Z
    10d0:	91 81       	ldd	r25, Z+1	; 0x01
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	11 96       	adiw	r26, 0x01	; 1
    10d6:	9c 93       	st	X, r25
    10d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10da:	fe 01       	movw	r30, r28
    10dc:	e1 56       	subi	r30, 0x61	; 97
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	d1 f6       	brne	.-76     	; 0x109c <main+0x32c>
    10e8:	27 c0       	rjmp	.+78     	; 0x1138 <main+0x3c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ea:	8e 01       	movw	r16, r28
    10ec:	01 56       	subi	r16, 0x61	; 97
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	fe 01       	movw	r30, r28
    10f2:	ef 55       	subi	r30, 0x5F	; 95
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	60 81       	ld	r22, Z
    10f8:	71 81       	ldd	r23, Z+1	; 0x01
    10fa:	82 81       	ldd	r24, Z+2	; 0x02
    10fc:	93 81       	ldd	r25, Z+3	; 0x03
    10fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	f8 01       	movw	r30, r16
    1108:	91 83       	std	Z+1, r25	; 0x01
    110a:	80 83       	st	Z, r24
    110c:	de 01       	movw	r26, r28
    110e:	a5 56       	subi	r26, 0x65	; 101
    1110:	bf 4f       	sbci	r27, 0xFF	; 255
    1112:	fe 01       	movw	r30, r28
    1114:	e1 56       	subi	r30, 0x61	; 97
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	80 81       	ld	r24, Z
    111a:	91 81       	ldd	r25, Z+1	; 0x01
    111c:	8d 93       	st	X+, r24
    111e:	9c 93       	st	X, r25
    1120:	fe 01       	movw	r30, r28
    1122:	e5 56       	subi	r30, 0x65	; 101
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	80 81       	ld	r24, Z
    1128:	91 81       	ldd	r25, Z+1	; 0x01
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <main+0x3ba>
    112e:	fe 01       	movw	r30, r28
    1130:	e5 56       	subi	r30, 0x65	; 101
    1132:	ff 4f       	sbci	r31, 0xFF	; 255
    1134:	91 83       	std	Z+1, r25	; 0x01
    1136:	80 83       	st	Z, r24
	}
	if(KeyPad_getPressedKey() == 13)      //When Press ON Key From KeyPad
	{
		LCD_clearScreen();                //Clear screen
		LCD_displayString("SAVING YOUR PW");  // display strin on lcd
		for(i = 0 ; i < 5 ; i++)
    1138:	de 01       	movw	r26, r28
    113a:	a6 54       	subi	r26, 0x46	; 70
    113c:	bf 4f       	sbci	r27, 0xFF	; 255
    113e:	fe 01       	movw	r30, r28
    1140:	e6 54       	subi	r30, 0x46	; 70
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	80 81       	ld	r24, Z
    1146:	8f 5f       	subi	r24, 0xFF	; 255
    1148:	8c 93       	st	X, r24
    114a:	fe 01       	movw	r30, r28
    114c:	e6 54       	subi	r30, 0x46	; 70
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	80 81       	ld	r24, Z
    1152:	85 30       	cpi	r24, 0x05	; 5
    1154:	08 f4       	brcc	.+2      	; 0x1158 <main+0x3e8>
    1156:	2e cf       	rjmp	.-420    	; 0xfb4 <main+0x244>
			_delay_ms(100);
		}

	}

	UART_sendByte(M1_READY);             //Send To Mc2 that Mc1 Ready To receive
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>

	//RECEIVE
	for ( i = 0 ; i < 5 ; i++)
    115e:	fe 01       	movw	r30, r28
    1160:	e6 54       	subi	r30, 0x46	; 70
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	10 82       	st	Z, r1
    1166:	19 c0       	rjmp	.+50     	; 0x119a <main+0x42a>
	{
		pwback[i] = UART_recieveByte();      //Receiving Pw From EEPROM From MC2
    1168:	fe 01       	movw	r30, r28
    116a:	e6 54       	subi	r30, 0x46	; 70
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	80 81       	ld	r24, Z
    1170:	08 2f       	mov	r16, r24
    1172:	10 e0       	ldi	r17, 0x00	; 0
    1174:	0e 94 43 18 	call	0x3086	; 0x3086 <UART_recieveByte>
    1178:	28 2f       	mov	r18, r24
    117a:	ce 01       	movw	r24, r28
    117c:	8f 53       	subi	r24, 0x3F	; 63
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	fc 01       	movw	r30, r24
    1182:	e0 0f       	add	r30, r16
    1184:	f1 1f       	adc	r31, r17
    1186:	20 83       	st	Z, r18
	}

	UART_sendByte(M1_READY);             //Send To Mc2 that Mc1 Ready To receive

	//RECEIVE
	for ( i = 0 ; i < 5 ; i++)
    1188:	de 01       	movw	r26, r28
    118a:	a6 54       	subi	r26, 0x46	; 70
    118c:	bf 4f       	sbci	r27, 0xFF	; 255
    118e:	fe 01       	movw	r30, r28
    1190:	e6 54       	subi	r30, 0x46	; 70
    1192:	ff 4f       	sbci	r31, 0xFF	; 255
    1194:	80 81       	ld	r24, Z
    1196:	8f 5f       	subi	r24, 0xFF	; 255
    1198:	8c 93       	st	X, r24
    119a:	fe 01       	movw	r30, r28
    119c:	e6 54       	subi	r30, 0x46	; 70
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	80 81       	ld	r24, Z
    11a2:	85 30       	cpi	r24, 0x05	; 5
    11a4:	08 f3       	brcs	.-62     	; 0x1168 <main+0x3f8>
		pwback[i] = UART_recieveByte();      //Receiving Pw From EEPROM From MC2
	}



	LCD_clearScreen();                    //clear lcd screen
    11a6:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
	LCD_displayString("ENTER SAME PW");   //display String on lcd
    11aa:	80 e8       	ldi	r24, 0x80	; 128
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	0e 94 42 17 	call	0x2e84	; 0x2e84 <LCD_goToRowColumn>
    11ba:	ee c1       	rjmp	.+988    	; 0x1598 <main+0x828>

	while(Conifirmation_flag == 0)       //condition for Entering the loop
	{
		for(i = 0 ; i < 5 ; i++)
    11bc:	fe 01       	movw	r30, r28
    11be:	e6 54       	subi	r30, 0x46	; 70
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	10 82       	st	Z, r1
    11c4:	dc c0       	rjmp	.+440    	; 0x137e <main+0x60e>
		{
			key = KeyPad_getPressedKey();   //get the key From Keypad
    11c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    11ca:	fe 01       	movw	r30, r28
    11cc:	e5 54       	subi	r30, 0x45	; 69
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	80 83       	st	Z, r24
			if((key >= 0) && (key <= 9))
    11d2:	fe 01       	movw	r30, r28
    11d4:	e5 54       	subi	r30, 0x45	; 69
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	80 81       	ld	r24, Z
    11da:	8a 30       	cpi	r24, 0x0A	; 10
    11dc:	a0 f4       	brcc	.+40     	; 0x1206 <main+0x496>
			{
				password[i] = key;          //Save the keys to an Array
    11de:	fe 01       	movw	r30, r28
    11e0:	e6 54       	subi	r30, 0x46	; 70
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	80 81       	ld	r24, Z
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	ce 01       	movw	r24, r28
    11ec:	8a 53       	subi	r24, 0x3A	; 58
    11ee:	9f 4f       	sbci	r25, 0xFF	; 255
    11f0:	dc 01       	movw	r26, r24
    11f2:	a2 0f       	add	r26, r18
    11f4:	b3 1f       	adc	r27, r19
    11f6:	fe 01       	movw	r30, r28
    11f8:	e5 54       	subi	r30, 0x45	; 69
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	80 81       	ld	r24, Z
    11fe:	8c 93       	st	X, r24
				LCD_displayCharacter('#');
    1200:	83 e2       	ldi	r24, 0x23	; 35
    1202:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <LCD_displayCharacter>
    1206:	fe 01       	movw	r30, r28
    1208:	e9 56       	subi	r30, 0x69	; 105
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	a8 ec       	ldi	r26, 0xC8	; 200
    1212:	b2 e4       	ldi	r27, 0x42	; 66
    1214:	80 83       	st	Z, r24
    1216:	91 83       	std	Z+1, r25	; 0x01
    1218:	a2 83       	std	Z+2, r26	; 0x02
    121a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121c:	8e 01       	movw	r16, r28
    121e:	0d 56       	subi	r16, 0x6D	; 109
    1220:	1f 4f       	sbci	r17, 0xFF	; 255
    1222:	fe 01       	movw	r30, r28
    1224:	e9 56       	subi	r30, 0x69	; 105
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	60 81       	ld	r22, Z
    122a:	71 81       	ldd	r23, Z+1	; 0x01
    122c:	82 81       	ldd	r24, Z+2	; 0x02
    122e:	93 81       	ldd	r25, Z+3	; 0x03
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	4a ef       	ldi	r20, 0xFA	; 250
    1236:	54 e4       	ldi	r21, 0x44	; 68
    1238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	f8 01       	movw	r30, r16
    1242:	80 83       	st	Z, r24
    1244:	91 83       	std	Z+1, r25	; 0x01
    1246:	a2 83       	std	Z+2, r26	; 0x02
    1248:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    124a:	fe 01       	movw	r30, r28
    124c:	ed 56       	subi	r30, 0x6D	; 109
    124e:	ff 4f       	sbci	r31, 0xFF	; 255
    1250:	60 81       	ld	r22, Z
    1252:	71 81       	ldd	r23, Z+1	; 0x01
    1254:	82 81       	ldd	r24, Z+2	; 0x02
    1256:	93 81       	ldd	r25, Z+3	; 0x03
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e8       	ldi	r20, 0x80	; 128
    125e:	5f e3       	ldi	r21, 0x3F	; 63
    1260:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1264:	88 23       	and	r24, r24
    1266:	44 f4       	brge	.+16     	; 0x1278 <main+0x508>
		__ticks = 1;
    1268:	fe 01       	movw	r30, r28
    126a:	ef 56       	subi	r30, 0x6F	; 111
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	91 83       	std	Z+1, r25	; 0x01
    1274:	80 83       	st	Z, r24
    1276:	64 c0       	rjmp	.+200    	; 0x1340 <main+0x5d0>
	else if (__tmp > 65535)
    1278:	fe 01       	movw	r30, r28
    127a:	ed 56       	subi	r30, 0x6D	; 109
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	60 81       	ld	r22, Z
    1280:	71 81       	ldd	r23, Z+1	; 0x01
    1282:	82 81       	ldd	r24, Z+2	; 0x02
    1284:	93 81       	ldd	r25, Z+3	; 0x03
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	3f ef       	ldi	r19, 0xFF	; 255
    128a:	4f e7       	ldi	r20, 0x7F	; 127
    128c:	57 e4       	ldi	r21, 0x47	; 71
    128e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1292:	18 16       	cp	r1, r24
    1294:	0c f0       	brlt	.+2      	; 0x1298 <main+0x528>
    1296:	43 c0       	rjmp	.+134    	; 0x131e <main+0x5ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1298:	fe 01       	movw	r30, r28
    129a:	e9 56       	subi	r30, 0x69	; 105
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e2       	ldi	r20, 0x20	; 32
    12ac:	51 e4       	ldi	r21, 0x41	; 65
    12ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	8e 01       	movw	r16, r28
    12b8:	0f 56       	subi	r16, 0x6F	; 111
    12ba:	1f 4f       	sbci	r17, 0xFF	; 255
    12bc:	bc 01       	movw	r22, r24
    12be:	cd 01       	movw	r24, r26
    12c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	f8 01       	movw	r30, r16
    12ca:	91 83       	std	Z+1, r25	; 0x01
    12cc:	80 83       	st	Z, r24
    12ce:	1f c0       	rjmp	.+62     	; 0x130e <main+0x59e>
    12d0:	fe 01       	movw	r30, r28
    12d2:	e1 57       	subi	r30, 0x71	; 113
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	88 ec       	ldi	r24, 0xC8	; 200
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	91 83       	std	Z+1, r25	; 0x01
    12dc:	80 83       	st	Z, r24
    12de:	fe 01       	movw	r30, r28
    12e0:	e1 57       	subi	r30, 0x71	; 113
    12e2:	ff 4f       	sbci	r31, 0xFF	; 255
    12e4:	80 81       	ld	r24, Z
    12e6:	91 81       	ldd	r25, Z+1	; 0x01
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <main+0x578>
    12ec:	fe 01       	movw	r30, r28
    12ee:	e1 57       	subi	r30, 0x71	; 113
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f6:	de 01       	movw	r26, r28
    12f8:	af 56       	subi	r26, 0x6F	; 111
    12fa:	bf 4f       	sbci	r27, 0xFF	; 255
    12fc:	fe 01       	movw	r30, r28
    12fe:	ef 56       	subi	r30, 0x6F	; 111
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	80 81       	ld	r24, Z
    1304:	91 81       	ldd	r25, Z+1	; 0x01
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	11 96       	adiw	r26, 0x01	; 1
    130a:	9c 93       	st	X, r25
    130c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130e:	fe 01       	movw	r30, r28
    1310:	ef 56       	subi	r30, 0x6F	; 111
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	80 81       	ld	r24, Z
    1316:	91 81       	ldd	r25, Z+1	; 0x01
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	d1 f6       	brne	.-76     	; 0x12d0 <main+0x560>
    131c:	27 c0       	rjmp	.+78     	; 0x136c <main+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131e:	8e 01       	movw	r16, r28
    1320:	0f 56       	subi	r16, 0x6F	; 111
    1322:	1f 4f       	sbci	r17, 0xFF	; 255
    1324:	fe 01       	movw	r30, r28
    1326:	ed 56       	subi	r30, 0x6D	; 109
    1328:	ff 4f       	sbci	r31, 0xFF	; 255
    132a:	60 81       	ld	r22, Z
    132c:	71 81       	ldd	r23, Z+1	; 0x01
    132e:	82 81       	ldd	r24, Z+2	; 0x02
    1330:	93 81       	ldd	r25, Z+3	; 0x03
    1332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	f8 01       	movw	r30, r16
    133c:	91 83       	std	Z+1, r25	; 0x01
    133e:	80 83       	st	Z, r24
    1340:	de 01       	movw	r26, r28
    1342:	a3 57       	subi	r26, 0x73	; 115
    1344:	bf 4f       	sbci	r27, 0xFF	; 255
    1346:	fe 01       	movw	r30, r28
    1348:	ef 56       	subi	r30, 0x6F	; 111
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	8d 93       	st	X+, r24
    1352:	9c 93       	st	X, r25
    1354:	fe 01       	movw	r30, r28
    1356:	e3 57       	subi	r30, 0x73	; 115
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	80 81       	ld	r24, Z
    135c:	91 81       	ldd	r25, Z+1	; 0x01
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	f1 f7       	brne	.-4      	; 0x135e <main+0x5ee>
    1362:	fe 01       	movw	r30, r28
    1364:	e3 57       	subi	r30, 0x73	; 115
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	91 83       	std	Z+1, r25	; 0x01
    136a:	80 83       	st	Z, r24
	LCD_displayString("ENTER SAME PW");   //display String on lcd
	LCD_goToRowColumn(1,0);

	while(Conifirmation_flag == 0)       //condition for Entering the loop
	{
		for(i = 0 ; i < 5 ; i++)
    136c:	de 01       	movw	r26, r28
    136e:	a6 54       	subi	r26, 0x46	; 70
    1370:	bf 4f       	sbci	r27, 0xFF	; 255
    1372:	fe 01       	movw	r30, r28
    1374:	e6 54       	subi	r30, 0x46	; 70
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	80 81       	ld	r24, Z
    137a:	8f 5f       	subi	r24, 0xFF	; 255
    137c:	8c 93       	st	X, r24
    137e:	fe 01       	movw	r30, r28
    1380:	e6 54       	subi	r30, 0x46	; 70
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	80 81       	ld	r24, Z
    1386:	85 30       	cpi	r24, 0x05	; 5
    1388:	08 f4       	brcc	.+2      	; 0x138c <main+0x61c>
    138a:	1d cf       	rjmp	.-454    	; 0x11c6 <main+0x456>
				password[i] = key;          //Save the keys to an Array
				LCD_displayCharacter('#');
			}
			_delay_ms(100); //new button every 100ms
		}
		if(KeyPad_getPressedKey() == 13)  //When Press ON Key From KeyPad
    138c:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1390:	8d 30       	cpi	r24, 0x0D	; 13
    1392:	09 f0       	breq	.+2      	; 0x1396 <main+0x626>
    1394:	01 c1       	rjmp	.+514    	; 0x1598 <main+0x828>
		{
			//Compare The Entered PW With pw that stored in EEPROM in MC2
			if(pwback[0] == password[0] && pwback[1] == password[1] && pwback[2] == password[2] && pwback[3] == password[3] && pwback[4] == password[4] )
    1396:	fe 01       	movw	r30, r28
    1398:	ef 53       	subi	r30, 0x3F	; 63
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	90 81       	ld	r25, Z
    139e:	fe 01       	movw	r30, r28
    13a0:	ea 53       	subi	r30, 0x3A	; 58
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	80 81       	ld	r24, Z
    13a6:	98 17       	cp	r25, r24
    13a8:	09 f0       	breq	.+2      	; 0x13ac <main+0x63c>
    13aa:	ec c0       	rjmp	.+472    	; 0x1584 <main+0x814>
    13ac:	fe 01       	movw	r30, r28
    13ae:	ef 53       	subi	r30, 0x3F	; 63
    13b0:	ff 4f       	sbci	r31, 0xFF	; 255
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	fe 01       	movw	r30, r28
    13b6:	ea 53       	subi	r30, 0x3A	; 58
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	81 81       	ldd	r24, Z+1	; 0x01
    13bc:	98 17       	cp	r25, r24
    13be:	09 f0       	breq	.+2      	; 0x13c2 <main+0x652>
    13c0:	e1 c0       	rjmp	.+450    	; 0x1584 <main+0x814>
    13c2:	fe 01       	movw	r30, r28
    13c4:	ef 53       	subi	r30, 0x3F	; 63
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	92 81       	ldd	r25, Z+2	; 0x02
    13ca:	fe 01       	movw	r30, r28
    13cc:	ea 53       	subi	r30, 0x3A	; 58
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	82 81       	ldd	r24, Z+2	; 0x02
    13d2:	98 17       	cp	r25, r24
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <main+0x668>
    13d6:	d6 c0       	rjmp	.+428    	; 0x1584 <main+0x814>
    13d8:	fe 01       	movw	r30, r28
    13da:	ef 53       	subi	r30, 0x3F	; 63
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	93 81       	ldd	r25, Z+3	; 0x03
    13e0:	fe 01       	movw	r30, r28
    13e2:	ea 53       	subi	r30, 0x3A	; 58
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	83 81       	ldd	r24, Z+3	; 0x03
    13e8:	98 17       	cp	r25, r24
    13ea:	09 f0       	breq	.+2      	; 0x13ee <main+0x67e>
    13ec:	cb c0       	rjmp	.+406    	; 0x1584 <main+0x814>
    13ee:	fe 01       	movw	r30, r28
    13f0:	ef 53       	subi	r30, 0x3F	; 63
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	94 81       	ldd	r25, Z+4	; 0x04
    13f6:	fe 01       	movw	r30, r28
    13f8:	ea 53       	subi	r30, 0x3A	; 58
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	84 81       	ldd	r24, Z+4	; 0x04
    13fe:	98 17       	cp	r25, r24
    1400:	09 f0       	breq	.+2      	; 0x1404 <main+0x694>
    1402:	c0 c0       	rjmp	.+384    	; 0x1584 <main+0x814>
			{
				LCD_clearScreen();   //clear lcd screen
    1404:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
				LCD_displayString("DONE");  //display String on lcd
    1408:	8e e8       	ldi	r24, 0x8E	; 142
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
    1410:	fe 01       	movw	r30, r28
    1412:	e7 57       	subi	r30, 0x77	; 119
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	a8 ec       	ldi	r26, 0xC8	; 200
    141c:	b3 e4       	ldi	r27, 0x43	; 67
    141e:	80 83       	st	Z, r24
    1420:	91 83       	std	Z+1, r25	; 0x01
    1422:	a2 83       	std	Z+2, r26	; 0x02
    1424:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1426:	8e 01       	movw	r16, r28
    1428:	0b 57       	subi	r16, 0x7B	; 123
    142a:	1f 4f       	sbci	r17, 0xFF	; 255
    142c:	fe 01       	movw	r30, r28
    142e:	e7 57       	subi	r30, 0x77	; 119
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	60 81       	ld	r22, Z
    1434:	71 81       	ldd	r23, Z+1	; 0x01
    1436:	82 81       	ldd	r24, Z+2	; 0x02
    1438:	93 81       	ldd	r25, Z+3	; 0x03
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	4a ef       	ldi	r20, 0xFA	; 250
    1440:	54 e4       	ldi	r21, 0x44	; 68
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	f8 01       	movw	r30, r16
    144c:	80 83       	st	Z, r24
    144e:	91 83       	std	Z+1, r25	; 0x01
    1450:	a2 83       	std	Z+2, r26	; 0x02
    1452:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1454:	fe 01       	movw	r30, r28
    1456:	eb 57       	subi	r30, 0x7B	; 123
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	60 81       	ld	r22, Z
    145c:	71 81       	ldd	r23, Z+1	; 0x01
    145e:	82 81       	ldd	r24, Z+2	; 0x02
    1460:	93 81       	ldd	r25, Z+3	; 0x03
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e8       	ldi	r20, 0x80	; 128
    1468:	5f e3       	ldi	r21, 0x3F	; 63
    146a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    146e:	88 23       	and	r24, r24
    1470:	44 f4       	brge	.+16     	; 0x1482 <main+0x712>
		__ticks = 1;
    1472:	fe 01       	movw	r30, r28
    1474:	ed 57       	subi	r30, 0x7D	; 125
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	91 83       	std	Z+1, r25	; 0x01
    147e:	80 83       	st	Z, r24
    1480:	64 c0       	rjmp	.+200    	; 0x154a <main+0x7da>
	else if (__tmp > 65535)
    1482:	fe 01       	movw	r30, r28
    1484:	eb 57       	subi	r30, 0x7B	; 123
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	60 81       	ld	r22, Z
    148a:	71 81       	ldd	r23, Z+1	; 0x01
    148c:	82 81       	ldd	r24, Z+2	; 0x02
    148e:	93 81       	ldd	r25, Z+3	; 0x03
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	3f ef       	ldi	r19, 0xFF	; 255
    1494:	4f e7       	ldi	r20, 0x7F	; 127
    1496:	57 e4       	ldi	r21, 0x47	; 71
    1498:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    149c:	18 16       	cp	r1, r24
    149e:	0c f0       	brlt	.+2      	; 0x14a2 <main+0x732>
    14a0:	43 c0       	rjmp	.+134    	; 0x1528 <main+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a2:	fe 01       	movw	r30, r28
    14a4:	e7 57       	subi	r30, 0x77	; 119
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	60 81       	ld	r22, Z
    14aa:	71 81       	ldd	r23, Z+1	; 0x01
    14ac:	82 81       	ldd	r24, Z+2	; 0x02
    14ae:	93 81       	ldd	r25, Z+3	; 0x03
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e2       	ldi	r20, 0x20	; 32
    14b6:	51 e4       	ldi	r21, 0x41	; 65
    14b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	8e 01       	movw	r16, r28
    14c2:	0d 57       	subi	r16, 0x7D	; 125
    14c4:	1f 4f       	sbci	r17, 0xFF	; 255
    14c6:	bc 01       	movw	r22, r24
    14c8:	cd 01       	movw	r24, r26
    14ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	f8 01       	movw	r30, r16
    14d4:	91 83       	std	Z+1, r25	; 0x01
    14d6:	80 83       	st	Z, r24
    14d8:	1f c0       	rjmp	.+62     	; 0x1518 <main+0x7a8>
    14da:	fe 01       	movw	r30, r28
    14dc:	ef 57       	subi	r30, 0x7F	; 127
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	88 ec       	ldi	r24, 0xC8	; 200
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	91 83       	std	Z+1, r25	; 0x01
    14e6:	80 83       	st	Z, r24
    14e8:	fe 01       	movw	r30, r28
    14ea:	ef 57       	subi	r30, 0x7F	; 127
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	80 81       	ld	r24, Z
    14f0:	91 81       	ldd	r25, Z+1	; 0x01
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    14f4:	f1 f7       	brne	.-4      	; 0x14f2 <main+0x782>
    14f6:	fe 01       	movw	r30, r28
    14f8:	ef 57       	subi	r30, 0x7F	; 127
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	91 83       	std	Z+1, r25	; 0x01
    14fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1500:	de 01       	movw	r26, r28
    1502:	ad 57       	subi	r26, 0x7D	; 125
    1504:	bf 4f       	sbci	r27, 0xFF	; 255
    1506:	fe 01       	movw	r30, r28
    1508:	ed 57       	subi	r30, 0x7D	; 125
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	11 96       	adiw	r26, 0x01	; 1
    1514:	9c 93       	st	X, r25
    1516:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1518:	fe 01       	movw	r30, r28
    151a:	ed 57       	subi	r30, 0x7D	; 125
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	80 81       	ld	r24, Z
    1520:	91 81       	ldd	r25, Z+1	; 0x01
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	d1 f6       	brne	.-76     	; 0x14da <main+0x76a>
    1526:	28 c0       	rjmp	.+80     	; 0x1578 <main+0x808>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1528:	8e 01       	movw	r16, r28
    152a:	0d 57       	subi	r16, 0x7D	; 125
    152c:	1f 4f       	sbci	r17, 0xFF	; 255
    152e:	fe 01       	movw	r30, r28
    1530:	eb 57       	subi	r30, 0x7B	; 123
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	60 81       	ld	r22, Z
    1536:	71 81       	ldd	r23, Z+1	; 0x01
    1538:	82 81       	ldd	r24, Z+2	; 0x02
    153a:	93 81       	ldd	r25, Z+3	; 0x03
    153c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	f8 01       	movw	r30, r16
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
    154a:	de 01       	movw	r26, r28
    154c:	a1 58       	subi	r26, 0x81	; 129
    154e:	bf 4f       	sbci	r27, 0xFF	; 255
    1550:	fe 01       	movw	r30, r28
    1552:	ed 57       	subi	r30, 0x7D	; 125
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 81       	ld	r24, Z
    1558:	91 81       	ldd	r25, Z+1	; 0x01
    155a:	11 96       	adiw	r26, 0x01	; 1
    155c:	9c 93       	st	X, r25
    155e:	8e 93       	st	-X, r24
    1560:	fe 01       	movw	r30, r28
    1562:	e1 58       	subi	r30, 0x81	; 129
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	80 81       	ld	r24, Z
    1568:	91 81       	ldd	r25, Z+1	; 0x01
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <main+0x7fa>
    156e:	fe 01       	movw	r30, r28
    1570:	e1 58       	subi	r30, 0x81	; 129
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	91 83       	std	Z+1, r25	; 0x01
    1576:	80 83       	st	Z, r24
				_delay_ms(400);
				Conifirmation_flag = 1;   //Set that flag means pw check complete
    1578:	fe 01       	movw	r30, r28
    157a:	e7 54       	subi	r30, 0x47	; 71
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 83       	st	Z, r24
    1582:	0a c0       	rjmp	.+20     	; 0x1598 <main+0x828>
				//now Exit from the loop
			}
			else   //Means Check Failed and Wrong Pw is entered by user in confirmation phase
			{
				LCD_clearScreen();  //clear lcd screen
    1584:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
				LCD_displayString("RE-ENTER THE PW");       //display String on lcd
    1588:	83 e9       	ldi	r24, 0x93	; 147
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
				LCD_goToRowColumn(1,0);
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	0e 94 42 17 	call	0x2e84	; 0x2e84 <LCD_goToRowColumn>

	LCD_clearScreen();                    //clear lcd screen
	LCD_displayString("ENTER SAME PW");   //display String on lcd
	LCD_goToRowColumn(1,0);

	while(Conifirmation_flag == 0)       //condition for Entering the loop
    1598:	fe 01       	movw	r30, r28
    159a:	e7 54       	subi	r30, 0x47	; 71
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	80 81       	ld	r24, Z
    15a0:	88 23       	and	r24, r24
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <main+0x836>
    15a4:	0b ce       	rjmp	.-1002   	; 0x11bc <main+0x44c>
				LCD_goToRowColumn(1,0);
			}

		}
	}
	Conifirmation_flag = 0;   //The Flag is Still Zero means To ask the User To Enter confirmation PW Again
    15a6:	fe 01       	movw	r30, r28
    15a8:	e7 54       	subi	r30, 0x47	; 71
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	10 82       	st	Z, r1


	while(1)
	{
		//main menu make the user to choose between change pw OR open the door
		LCD_clearScreen();
    15ae:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
		LCD_displayString("x: CHANGE PW");
    15b2:	83 ea       	ldi	r24, 0xA3	; 163
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
		LCD_goToRowColumn(1,0);
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	0e 94 42 17 	call	0x2e84	; 0x2e84 <LCD_goToRowColumn>
		LCD_displayString("+: OPEN DOOR");
    15c2:	80 eb       	ldi	r24, 0xB0	; 176
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>

		if(KeyPad_getPressedKey() == '*')   // waiting key  * for changing pw
    15ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    15ce:	8a 32       	cpi	r24, 0x2A	; 42
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <main+0x864>
    15d2:	2d c6       	rjmp	.+3162   	; 0x222e <main+0x14be>
    15d4:	16 c6       	rjmp	.+3116   	; 0x2202 <main+0x1492>
		{
			while(error1_counter < 3 && done_flag == 0) //condition for Entering the loop
			{
				LCD_clearScreen();  //clear lcd screen
    15d6:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
				LCD_displayString("ENTER OLD PW"); //display string on lcd
    15da:	8d eb       	ldi	r24, 0xBD	; 189
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
				LCD_goToRowColumn(1,0);
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	0e 94 42 17 	call	0x2e84	; 0x2e84 <LCD_goToRowColumn>
				for(i = 0 ; i < 5 ; i++)
    15ea:	fe 01       	movw	r30, r28
    15ec:	e6 54       	subi	r30, 0x46	; 70
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	10 82       	st	Z, r1
    15f2:	dc c0       	rjmp	.+440    	; 0x17ac <main+0xa3c>
				{
					key = KeyPad_getPressedKey(); //waiting  key from KeyPad
    15f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    15f8:	fe 01       	movw	r30, r28
    15fa:	e5 54       	subi	r30, 0x45	; 69
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	80 83       	st	Z, r24
					if((key >= 0) && (key <= 9))  //check the key is number or not?
    1600:	fe 01       	movw	r30, r28
    1602:	e5 54       	subi	r30, 0x45	; 69
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	80 81       	ld	r24, Z
    1608:	8a 30       	cpi	r24, 0x0A	; 10
    160a:	a0 f4       	brcc	.+40     	; 0x1634 <main+0x8c4>
					{
						password[i] = key;   //save the key in an Array of PASSWORD
    160c:	fe 01       	movw	r30, r28
    160e:	e6 54       	subi	r30, 0x46	; 70
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	80 81       	ld	r24, Z
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	ce 01       	movw	r24, r28
    161a:	8a 53       	subi	r24, 0x3A	; 58
    161c:	9f 4f       	sbci	r25, 0xFF	; 255
    161e:	dc 01       	movw	r26, r24
    1620:	a2 0f       	add	r26, r18
    1622:	b3 1f       	adc	r27, r19
    1624:	fe 01       	movw	r30, r28
    1626:	e5 54       	subi	r30, 0x45	; 69
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	8c 93       	st	X, r24
						LCD_displayCharacter('#');
    162e:	83 e2       	ldi	r24, 0x23	; 35
    1630:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <LCD_displayCharacter>
    1634:	fe 01       	movw	r30, r28
    1636:	e5 58       	subi	r30, 0x85	; 133
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	a8 ec       	ldi	r26, 0xC8	; 200
    1640:	b2 e4       	ldi	r27, 0x42	; 66
    1642:	80 83       	st	Z, r24
    1644:	91 83       	std	Z+1, r25	; 0x01
    1646:	a2 83       	std	Z+2, r26	; 0x02
    1648:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164a:	8e 01       	movw	r16, r28
    164c:	09 58       	subi	r16, 0x89	; 137
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	fe 01       	movw	r30, r28
    1652:	e5 58       	subi	r30, 0x85	; 133
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	93 81       	ldd	r25, Z+3	; 0x03
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	4a ef       	ldi	r20, 0xFA	; 250
    1664:	54 e4       	ldi	r21, 0x44	; 68
    1666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	f8 01       	movw	r30, r16
    1670:	80 83       	st	Z, r24
    1672:	91 83       	std	Z+1, r25	; 0x01
    1674:	a2 83       	std	Z+2, r26	; 0x02
    1676:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1678:	fe 01       	movw	r30, r28
    167a:	e9 58       	subi	r30, 0x89	; 137
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	60 81       	ld	r22, Z
    1680:	71 81       	ldd	r23, Z+1	; 0x01
    1682:	82 81       	ldd	r24, Z+2	; 0x02
    1684:	93 81       	ldd	r25, Z+3	; 0x03
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e8       	ldi	r20, 0x80	; 128
    168c:	5f e3       	ldi	r21, 0x3F	; 63
    168e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1692:	88 23       	and	r24, r24
    1694:	44 f4       	brge	.+16     	; 0x16a6 <main+0x936>
		__ticks = 1;
    1696:	fe 01       	movw	r30, r28
    1698:	eb 58       	subi	r30, 0x8B	; 139
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	80 83       	st	Z, r24
    16a4:	64 c0       	rjmp	.+200    	; 0x176e <main+0x9fe>
	else if (__tmp > 65535)
    16a6:	fe 01       	movw	r30, r28
    16a8:	e9 58       	subi	r30, 0x89	; 137
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	57 e4       	ldi	r21, 0x47	; 71
    16bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	0c f0       	brlt	.+2      	; 0x16c6 <main+0x956>
    16c4:	43 c0       	rjmp	.+134    	; 0x174c <main+0x9dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c6:	fe 01       	movw	r30, r28
    16c8:	e5 58       	subi	r30, 0x85	; 133
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	60 81       	ld	r22, Z
    16ce:	71 81       	ldd	r23, Z+1	; 0x01
    16d0:	82 81       	ldd	r24, Z+2	; 0x02
    16d2:	93 81       	ldd	r25, Z+3	; 0x03
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e2       	ldi	r20, 0x20	; 32
    16da:	51 e4       	ldi	r21, 0x41	; 65
    16dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	8e 01       	movw	r16, r28
    16e6:	0b 58       	subi	r16, 0x8B	; 139
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	bc 01       	movw	r22, r24
    16ec:	cd 01       	movw	r24, r26
    16ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	f8 01       	movw	r30, r16
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	80 83       	st	Z, r24
    16fc:	1f c0       	rjmp	.+62     	; 0x173c <main+0x9cc>
    16fe:	fe 01       	movw	r30, r28
    1700:	ed 58       	subi	r30, 0x8D	; 141
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	88 ec       	ldi	r24, 0xC8	; 200
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	80 83       	st	Z, r24
    170c:	fe 01       	movw	r30, r28
    170e:	ed 58       	subi	r30, 0x8D	; 141
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <main+0x9a6>
    171a:	fe 01       	movw	r30, r28
    171c:	ed 58       	subi	r30, 0x8D	; 141
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1724:	de 01       	movw	r26, r28
    1726:	ab 58       	subi	r26, 0x8B	; 139
    1728:	bf 4f       	sbci	r27, 0xFF	; 255
    172a:	fe 01       	movw	r30, r28
    172c:	eb 58       	subi	r30, 0x8B	; 139
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	80 81       	ld	r24, Z
    1732:	91 81       	ldd	r25, Z+1	; 0x01
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	11 96       	adiw	r26, 0x01	; 1
    1738:	9c 93       	st	X, r25
    173a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173c:	fe 01       	movw	r30, r28
    173e:	eb 58       	subi	r30, 0x8B	; 139
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	80 81       	ld	r24, Z
    1744:	91 81       	ldd	r25, Z+1	; 0x01
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	d1 f6       	brne	.-76     	; 0x16fe <main+0x98e>
    174a:	27 c0       	rjmp	.+78     	; 0x179a <main+0xa2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174c:	8e 01       	movw	r16, r28
    174e:	0b 58       	subi	r16, 0x8B	; 139
    1750:	1f 4f       	sbci	r17, 0xFF	; 255
    1752:	fe 01       	movw	r30, r28
    1754:	e9 58       	subi	r30, 0x89	; 137
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	60 81       	ld	r22, Z
    175a:	71 81       	ldd	r23, Z+1	; 0x01
    175c:	82 81       	ldd	r24, Z+2	; 0x02
    175e:	93 81       	ldd	r25, Z+3	; 0x03
    1760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	f8 01       	movw	r30, r16
    176a:	91 83       	std	Z+1, r25	; 0x01
    176c:	80 83       	st	Z, r24
    176e:	de 01       	movw	r26, r28
    1770:	af 58       	subi	r26, 0x8F	; 143
    1772:	bf 4f       	sbci	r27, 0xFF	; 255
    1774:	fe 01       	movw	r30, r28
    1776:	eb 58       	subi	r30, 0x8B	; 139
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
    177e:	8d 93       	st	X+, r24
    1780:	9c 93       	st	X, r25
    1782:	fe 01       	movw	r30, r28
    1784:	ef 58       	subi	r30, 0x8F	; 143
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 81       	ld	r24, Z
    178a:	91 81       	ldd	r25, Z+1	; 0x01
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <main+0xa1c>
    1790:	fe 01       	movw	r30, r28
    1792:	ef 58       	subi	r30, 0x8F	; 143
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	91 83       	std	Z+1, r25	; 0x01
    1798:	80 83       	st	Z, r24
			while(error1_counter < 3 && done_flag == 0) //condition for Entering the loop
			{
				LCD_clearScreen();  //clear lcd screen
				LCD_displayString("ENTER OLD PW"); //display string on lcd
				LCD_goToRowColumn(1,0);
				for(i = 0 ; i < 5 ; i++)
    179a:	de 01       	movw	r26, r28
    179c:	a6 54       	subi	r26, 0x46	; 70
    179e:	bf 4f       	sbci	r27, 0xFF	; 255
    17a0:	fe 01       	movw	r30, r28
    17a2:	e6 54       	subi	r30, 0x46	; 70
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	80 81       	ld	r24, Z
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	8c 93       	st	X, r24
    17ac:	fe 01       	movw	r30, r28
    17ae:	e6 54       	subi	r30, 0x46	; 70
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	80 81       	ld	r24, Z
    17b4:	85 30       	cpi	r24, 0x05	; 5
    17b6:	08 f4       	brcc	.+2      	; 0x17ba <main+0xa4a>
    17b8:	1d cf       	rjmp	.-454    	; 0x15f4 <main+0x884>
						password[i] = key;   //save the key in an Array of PASSWORD
						LCD_displayCharacter('#');
					}
					_delay_ms(100); //new button every 100ms
				}
				if(KeyPad_getPressedKey() == 13) //When Press ON Key From KeyPad
    17ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    17be:	8d 30       	cpi	r24, 0x0D	; 13
    17c0:	09 f0       	breq	.+2      	; 0x17c4 <main+0xa54>
    17c2:	1f c5       	rjmp	.+2622   	; 0x2202 <main+0x1492>
				{
					//Compare The Entered PW With pw that stored in EEPROM in MC2
					if(pwback[0] == password[0] && pwback[1] == password[1] && pwback[2] == password[2] && pwback[3] == password[3] && pwback[4] == password[4] )
    17c4:	fe 01       	movw	r30, r28
    17c6:	ef 53       	subi	r30, 0x3F	; 63
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	90 81       	ld	r25, Z
    17cc:	fe 01       	movw	r30, r28
    17ce:	ea 53       	subi	r30, 0x3A	; 58
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	80 81       	ld	r24, Z
    17d4:	98 17       	cp	r25, r24
    17d6:	09 f0       	breq	.+2      	; 0x17da <main+0xa6a>
    17d8:	77 c4       	rjmp	.+2286   	; 0x20c8 <main+0x1358>
    17da:	fe 01       	movw	r30, r28
    17dc:	ef 53       	subi	r30, 0x3F	; 63
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	91 81       	ldd	r25, Z+1	; 0x01
    17e2:	fe 01       	movw	r30, r28
    17e4:	ea 53       	subi	r30, 0x3A	; 58
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	81 81       	ldd	r24, Z+1	; 0x01
    17ea:	98 17       	cp	r25, r24
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <main+0xa80>
    17ee:	6c c4       	rjmp	.+2264   	; 0x20c8 <main+0x1358>
    17f0:	fe 01       	movw	r30, r28
    17f2:	ef 53       	subi	r30, 0x3F	; 63
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	92 81       	ldd	r25, Z+2	; 0x02
    17f8:	fe 01       	movw	r30, r28
    17fa:	ea 53       	subi	r30, 0x3A	; 58
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	98 17       	cp	r25, r24
    1802:	09 f0       	breq	.+2      	; 0x1806 <main+0xa96>
    1804:	61 c4       	rjmp	.+2242   	; 0x20c8 <main+0x1358>
    1806:	fe 01       	movw	r30, r28
    1808:	ef 53       	subi	r30, 0x3F	; 63
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	93 81       	ldd	r25, Z+3	; 0x03
    180e:	fe 01       	movw	r30, r28
    1810:	ea 53       	subi	r30, 0x3A	; 58
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	83 81       	ldd	r24, Z+3	; 0x03
    1816:	98 17       	cp	r25, r24
    1818:	09 f0       	breq	.+2      	; 0x181c <main+0xaac>
    181a:	56 c4       	rjmp	.+2220   	; 0x20c8 <main+0x1358>
    181c:	fe 01       	movw	r30, r28
    181e:	ef 53       	subi	r30, 0x3F	; 63
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	94 81       	ldd	r25, Z+4	; 0x04
    1824:	fe 01       	movw	r30, r28
    1826:	ea 53       	subi	r30, 0x3A	; 58
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	84 81       	ldd	r24, Z+4	; 0x04
    182c:	98 17       	cp	r25, r24
    182e:	09 f0       	breq	.+2      	; 0x1832 <main+0xac2>
    1830:	4b c4       	rjmp	.+2198   	; 0x20c8 <main+0x1358>
					{
						LCD_clearScreen();  //clear lcd screen
    1832:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
						LCD_displayString("DONE"); //display string on lcd
    1836:	8e e8       	ldi	r24, 0x8E	; 142
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
    183e:	fe 01       	movw	r30, r28
    1840:	e3 59       	subi	r30, 0x93	; 147
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	aa ef       	ldi	r26, 0xFA	; 250
    184a:	b3 e4       	ldi	r27, 0x43	; 67
    184c:	80 83       	st	Z, r24
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	a2 83       	std	Z+2, r26	; 0x02
    1852:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1854:	8e 01       	movw	r16, r28
    1856:	07 59       	subi	r16, 0x97	; 151
    1858:	1f 4f       	sbci	r17, 0xFF	; 255
    185a:	fe 01       	movw	r30, r28
    185c:	e3 59       	subi	r30, 0x93	; 147
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	4a ef       	ldi	r20, 0xFA	; 250
    186e:	54 e4       	ldi	r21, 0x44	; 68
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	f8 01       	movw	r30, r16
    187a:	80 83       	st	Z, r24
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	a2 83       	std	Z+2, r26	; 0x02
    1880:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1882:	fe 01       	movw	r30, r28
    1884:	e7 59       	subi	r30, 0x97	; 151
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	60 81       	ld	r22, Z
    188a:	71 81       	ldd	r23, Z+1	; 0x01
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e8       	ldi	r20, 0x80	; 128
    1896:	5f e3       	ldi	r21, 0x3F	; 63
    1898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    189c:	88 23       	and	r24, r24
    189e:	44 f4       	brge	.+16     	; 0x18b0 <main+0xb40>
		__ticks = 1;
    18a0:	fe 01       	movw	r30, r28
    18a2:	e9 59       	subi	r30, 0x99	; 153
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	80 83       	st	Z, r24
    18ae:	64 c0       	rjmp	.+200    	; 0x1978 <main+0xc08>
	else if (__tmp > 65535)
    18b0:	fe 01       	movw	r30, r28
    18b2:	e7 59       	subi	r30, 0x97	; 151
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	60 81       	ld	r22, Z
    18b8:	71 81       	ldd	r23, Z+1	; 0x01
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	3f ef       	ldi	r19, 0xFF	; 255
    18c2:	4f e7       	ldi	r20, 0x7F	; 127
    18c4:	57 e4       	ldi	r21, 0x47	; 71
    18c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ca:	18 16       	cp	r1, r24
    18cc:	0c f0       	brlt	.+2      	; 0x18d0 <main+0xb60>
    18ce:	43 c0       	rjmp	.+134    	; 0x1956 <main+0xbe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d0:	fe 01       	movw	r30, r28
    18d2:	e3 59       	subi	r30, 0x93	; 147
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	60 81       	ld	r22, Z
    18d8:	71 81       	ldd	r23, Z+1	; 0x01
    18da:	82 81       	ldd	r24, Z+2	; 0x02
    18dc:	93 81       	ldd	r25, Z+3	; 0x03
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e2       	ldi	r20, 0x20	; 32
    18e4:	51 e4       	ldi	r21, 0x41	; 65
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	8e 01       	movw	r16, r28
    18f0:	09 59       	subi	r16, 0x99	; 153
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	bc 01       	movw	r22, r24
    18f6:	cd 01       	movw	r24, r26
    18f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	f8 01       	movw	r30, r16
    1902:	91 83       	std	Z+1, r25	; 0x01
    1904:	80 83       	st	Z, r24
    1906:	1f c0       	rjmp	.+62     	; 0x1946 <main+0xbd6>
    1908:	fe 01       	movw	r30, r28
    190a:	eb 59       	subi	r30, 0x9B	; 155
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	88 ec       	ldi	r24, 0xC8	; 200
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	80 83       	st	Z, r24
    1916:	fe 01       	movw	r30, r28
    1918:	eb 59       	subi	r30, 0x9B	; 155
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	80 81       	ld	r24, Z
    191e:	91 81       	ldd	r25, Z+1	; 0x01
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <main+0xbb0>
    1924:	fe 01       	movw	r30, r28
    1926:	eb 59       	subi	r30, 0x9B	; 155
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	de 01       	movw	r26, r28
    1930:	a9 59       	subi	r26, 0x99	; 153
    1932:	bf 4f       	sbci	r27, 0xFF	; 255
    1934:	fe 01       	movw	r30, r28
    1936:	e9 59       	subi	r30, 0x99	; 153
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	80 81       	ld	r24, Z
    193c:	91 81       	ldd	r25, Z+1	; 0x01
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	11 96       	adiw	r26, 0x01	; 1
    1942:	9c 93       	st	X, r25
    1944:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	fe 01       	movw	r30, r28
    1948:	e9 59       	subi	r30, 0x99	; 153
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	80 81       	ld	r24, Z
    194e:	91 81       	ldd	r25, Z+1	; 0x01
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	d1 f6       	brne	.-76     	; 0x1908 <main+0xb98>
    1954:	27 c0       	rjmp	.+78     	; 0x19a4 <main+0xc34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1956:	8e 01       	movw	r16, r28
    1958:	09 59       	subi	r16, 0x99	; 153
    195a:	1f 4f       	sbci	r17, 0xFF	; 255
    195c:	fe 01       	movw	r30, r28
    195e:	e7 59       	subi	r30, 0x97	; 151
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	f8 01       	movw	r30, r16
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
    1978:	de 01       	movw	r26, r28
    197a:	ad 59       	subi	r26, 0x9D	; 157
    197c:	bf 4f       	sbci	r27, 0xFF	; 255
    197e:	fe 01       	movw	r30, r28
    1980:	e9 59       	subi	r30, 0x99	; 153
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 81       	ld	r24, Z
    1986:	91 81       	ldd	r25, Z+1	; 0x01
    1988:	8d 93       	st	X+, r24
    198a:	9c 93       	st	X, r25
    198c:	fe 01       	movw	r30, r28
    198e:	ed 59       	subi	r30, 0x9D	; 157
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	80 81       	ld	r24, Z
    1994:	91 81       	ldd	r25, Z+1	; 0x01
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <main+0xc26>
    199a:	fe 01       	movw	r30, r28
    199c:	ed 59       	subi	r30, 0x9D	; 157
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
						_delay_ms(500); //delay for 0.5 sec
						done_flag = 1;  //this flag is set when pw check successfully complete
    19a4:	fe 01       	movw	r30, r28
    19a6:	e8 54       	subi	r30, 0x48	; 72
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	80 83       	st	Z, r24


						//Enter new PW for 2nd Time

						LCD_clearScreen();  // clear lcd screen
    19ae:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
						LCD_displayString("PLZ ENTER New PW");  //display string on lcd
    19b2:	8a ec       	ldi	r24, 0xCA	; 202
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
						LCD_goToRowColumn(1,0);
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	0e 94 42 17 	call	0x2e84	; 0x2e84 <LCD_goToRowColumn>
						UART_sendByte(WRITE_IN_EEPROM); //send request to Mc2 To write in EEPROM
    19c2:	83 e0       	ldi	r24, 0x03	; 3
    19c4:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>

						for(i = 0 ; i < 5 ; i++)
    19c8:	fe 01       	movw	r30, r28
    19ca:	e6 54       	subi	r30, 0x46	; 70
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	10 82       	st	Z, r1
    19d0:	dc c0       	rjmp	.+440    	; 0x1b8a <main+0xe1a>
						{
							key = KeyPad_getPressedKey(); //get the key From Keypad
    19d2:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    19d6:	fe 01       	movw	r30, r28
    19d8:	e5 54       	subi	r30, 0x45	; 69
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 83       	st	Z, r24
							if((key >= 0) && (key <= 9))  //check the key is number or not
    19de:	fe 01       	movw	r30, r28
    19e0:	e5 54       	subi	r30, 0x45	; 69
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 81       	ld	r24, Z
    19e6:	8a 30       	cpi	r24, 0x0A	; 10
    19e8:	a0 f4       	brcc	.+40     	; 0x1a12 <main+0xca2>
							{
								NewPW[i] = key;  // save the key in an Array of pw
    19ea:	fe 01       	movw	r30, r28
    19ec:	e6 54       	subi	r30, 0x46	; 70
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	ce 01       	movw	r24, r28
    19f8:	84 54       	subi	r24, 0x44	; 68
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	dc 01       	movw	r26, r24
    19fe:	a2 0f       	add	r26, r18
    1a00:	b3 1f       	adc	r27, r19
    1a02:	fe 01       	movw	r30, r28
    1a04:	e5 54       	subi	r30, 0x45	; 69
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 81       	ld	r24, Z
    1a0a:	8c 93       	st	X, r24
								LCD_displayCharacter('#');  //display pw in #
    1a0c:	83 e2       	ldi	r24, 0x23	; 35
    1a0e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <LCD_displayCharacter>
    1a12:	fe 01       	movw	r30, r28
    1a14:	e1 5a       	subi	r30, 0xA1	; 161
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	a8 ec       	ldi	r26, 0xC8	; 200
    1a1e:	b2 e4       	ldi	r27, 0x42	; 66
    1a20:	80 83       	st	Z, r24
    1a22:	91 83       	std	Z+1, r25	; 0x01
    1a24:	a2 83       	std	Z+2, r26	; 0x02
    1a26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a28:	8e 01       	movw	r16, r28
    1a2a:	05 5a       	subi	r16, 0xA5	; 165
    1a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2e:	fe 01       	movw	r30, r28
    1a30:	e1 5a       	subi	r30, 0xA1	; 161
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	60 81       	ld	r22, Z
    1a36:	71 81       	ldd	r23, Z+1	; 0x01
    1a38:	82 81       	ldd	r24, Z+2	; 0x02
    1a3a:	93 81       	ldd	r25, Z+3	; 0x03
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	4a ef       	ldi	r20, 0xFA	; 250
    1a42:	54 e4       	ldi	r21, 0x44	; 68
    1a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	f8 01       	movw	r30, r16
    1a4e:	80 83       	st	Z, r24
    1a50:	91 83       	std	Z+1, r25	; 0x01
    1a52:	a2 83       	std	Z+2, r26	; 0x02
    1a54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a56:	fe 01       	movw	r30, r28
    1a58:	e5 5a       	subi	r30, 0xA5	; 165
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	60 81       	ld	r22, Z
    1a5e:	71 81       	ldd	r23, Z+1	; 0x01
    1a60:	82 81       	ldd	r24, Z+2	; 0x02
    1a62:	93 81       	ldd	r25, Z+3	; 0x03
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e8       	ldi	r20, 0x80	; 128
    1a6a:	5f e3       	ldi	r21, 0x3F	; 63
    1a6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a70:	88 23       	and	r24, r24
    1a72:	44 f4       	brge	.+16     	; 0x1a84 <main+0xd14>
		__ticks = 1;
    1a74:	fe 01       	movw	r30, r28
    1a76:	e7 5a       	subi	r30, 0xA7	; 167
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	91 83       	std	Z+1, r25	; 0x01
    1a80:	80 83       	st	Z, r24
    1a82:	64 c0       	rjmp	.+200    	; 0x1b4c <main+0xddc>
	else if (__tmp > 65535)
    1a84:	fe 01       	movw	r30, r28
    1a86:	e5 5a       	subi	r30, 0xA5	; 165
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	60 81       	ld	r22, Z
    1a8c:	71 81       	ldd	r23, Z+1	; 0x01
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	93 81       	ldd	r25, Z+3	; 0x03
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	3f ef       	ldi	r19, 0xFF	; 255
    1a96:	4f e7       	ldi	r20, 0x7F	; 127
    1a98:	57 e4       	ldi	r21, 0x47	; 71
    1a9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a9e:	18 16       	cp	r1, r24
    1aa0:	0c f0       	brlt	.+2      	; 0x1aa4 <main+0xd34>
    1aa2:	43 c0       	rjmp	.+134    	; 0x1b2a <main+0xdba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e1 5a       	subi	r30, 0xA1	; 161
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	60 81       	ld	r22, Z
    1aac:	71 81       	ldd	r23, Z+1	; 0x01
    1aae:	82 81       	ldd	r24, Z+2	; 0x02
    1ab0:	93 81       	ldd	r25, Z+3	; 0x03
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e2       	ldi	r20, 0x20	; 32
    1ab8:	51 e4       	ldi	r21, 0x41	; 65
    1aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	8e 01       	movw	r16, r28
    1ac4:	07 5a       	subi	r16, 0xA7	; 167
    1ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac8:	bc 01       	movw	r22, r24
    1aca:	cd 01       	movw	r24, r26
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	80 83       	st	Z, r24
    1ada:	1f c0       	rjmp	.+62     	; 0x1b1a <main+0xdaa>
    1adc:	fe 01       	movw	r30, r28
    1ade:	e9 5a       	subi	r30, 0xA9	; 169
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	88 ec       	ldi	r24, 0xC8	; 200
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	80 83       	st	Z, r24
    1aea:	fe 01       	movw	r30, r28
    1aec:	e9 5a       	subi	r30, 0xA9	; 169
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	80 81       	ld	r24, Z
    1af2:	91 81       	ldd	r25, Z+1	; 0x01
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <main+0xd84>
    1af8:	fe 01       	movw	r30, r28
    1afa:	e9 5a       	subi	r30, 0xA9	; 169
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	91 83       	std	Z+1, r25	; 0x01
    1b00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b02:	de 01       	movw	r26, r28
    1b04:	a7 5a       	subi	r26, 0xA7	; 167
    1b06:	bf 4f       	sbci	r27, 0xFF	; 255
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e7 5a       	subi	r30, 0xA7	; 167
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	11 96       	adiw	r26, 0x01	; 1
    1b16:	9c 93       	st	X, r25
    1b18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	e7 5a       	subi	r30, 0xA7	; 167
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	80 81       	ld	r24, Z
    1b22:	91 81       	ldd	r25, Z+1	; 0x01
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	d1 f6       	brne	.-76     	; 0x1adc <main+0xd6c>
    1b28:	27 c0       	rjmp	.+78     	; 0x1b78 <main+0xe08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2a:	8e 01       	movw	r16, r28
    1b2c:	07 5a       	subi	r16, 0xA7	; 167
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b30:	fe 01       	movw	r30, r28
    1b32:	e5 5a       	subi	r30, 0xA5	; 165
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	60 81       	ld	r22, Z
    1b38:	71 81       	ldd	r23, Z+1	; 0x01
    1b3a:	82 81       	ldd	r24, Z+2	; 0x02
    1b3c:	93 81       	ldd	r25, Z+3	; 0x03
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	f8 01       	movw	r30, r16
    1b48:	91 83       	std	Z+1, r25	; 0x01
    1b4a:	80 83       	st	Z, r24
    1b4c:	de 01       	movw	r26, r28
    1b4e:	ab 5a       	subi	r26, 0xAB	; 171
    1b50:	bf 4f       	sbci	r27, 0xFF	; 255
    1b52:	fe 01       	movw	r30, r28
    1b54:	e7 5a       	subi	r30, 0xA7	; 167
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	80 81       	ld	r24, Z
    1b5a:	91 81       	ldd	r25, Z+1	; 0x01
    1b5c:	8d 93       	st	X+, r24
    1b5e:	9c 93       	st	X, r25
    1b60:	fe 01       	movw	r30, r28
    1b62:	eb 5a       	subi	r30, 0xAB	; 171
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	80 81       	ld	r24, Z
    1b68:	91 81       	ldd	r25, Z+1	; 0x01
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <main+0xdfa>
    1b6e:	fe 01       	movw	r30, r28
    1b70:	eb 5a       	subi	r30, 0xAB	; 171
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	91 83       	std	Z+1, r25	; 0x01
    1b76:	80 83       	st	Z, r24
						LCD_clearScreen();  // clear lcd screen
						LCD_displayString("PLZ ENTER New PW");  //display string on lcd
						LCD_goToRowColumn(1,0);
						UART_sendByte(WRITE_IN_EEPROM); //send request to Mc2 To write in EEPROM

						for(i = 0 ; i < 5 ; i++)
    1b78:	de 01       	movw	r26, r28
    1b7a:	a6 54       	subi	r26, 0x46	; 70
    1b7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e6 54       	subi	r30, 0x46	; 70
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 81       	ld	r24, Z
    1b86:	8f 5f       	subi	r24, 0xFF	; 255
    1b88:	8c 93       	st	X, r24
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	e6 54       	subi	r30, 0x46	; 70
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	80 81       	ld	r24, Z
    1b92:	85 30       	cpi	r24, 0x05	; 5
    1b94:	08 f4       	brcc	.+2      	; 0x1b98 <main+0xe28>
    1b96:	1d cf       	rjmp	.-454    	; 0x19d2 <main+0xc62>
								NewPW[i] = key;  // save the key in an Array of pw
								LCD_displayCharacter('#');  //display pw in #
							}
							_delay_ms(100); //new button every 100ms
						}
						if(KeyPad_getPressedKey() == 13) //When Press ON Key From KeyPad
    1b98:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1b9c:	8d 30       	cpi	r24, 0x0D	; 13
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <main+0xe32>
    1ba0:	d7 c0       	rjmp	.+430    	; 0x1d50 <main+0xfe0>
						{
							for(i = 0 ; i < 5 ; i++)
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e6 54       	subi	r30, 0x46	; 70
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	10 82       	st	Z, r1
    1baa:	cb c0       	rjmp	.+406    	; 0x1d42 <main+0xfd2>
							{
								UART_sendByte(NewPW[i]); //send pw to MC2 to write it in EEPROM
    1bac:	fe 01       	movw	r30, r28
    1bae:	e6 54       	subi	r30, 0x46	; 70
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	80 81       	ld	r24, Z
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	ce 01       	movw	r24, r28
    1bba:	84 54       	subi	r24, 0x44	; 68
    1bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	e2 0f       	add	r30, r18
    1bc2:	f3 1f       	adc	r31, r19
    1bc4:	80 81       	ld	r24, Z
    1bc6:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>
    1bca:	fe 01       	movw	r30, r28
    1bcc:	ef 5a       	subi	r30, 0xAF	; 175
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	a8 ec       	ldi	r26, 0xC8	; 200
    1bd6:	b2 e4       	ldi	r27, 0x42	; 66
    1bd8:	80 83       	st	Z, r24
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	a2 83       	std	Z+2, r26	; 0x02
    1bde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be0:	8e 01       	movw	r16, r28
    1be2:	03 5b       	subi	r16, 0xB3	; 179
    1be4:	1f 4f       	sbci	r17, 0xFF	; 255
    1be6:	fe 01       	movw	r30, r28
    1be8:	ef 5a       	subi	r30, 0xAF	; 175
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	4a ef       	ldi	r20, 0xFA	; 250
    1bfa:	54 e4       	ldi	r21, 0x44	; 68
    1bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	f8 01       	movw	r30, r16
    1c06:	80 83       	st	Z, r24
    1c08:	91 83       	std	Z+1, r25	; 0x01
    1c0a:	a2 83       	std	Z+2, r26	; 0x02
    1c0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c0e:	fe 01       	movw	r30, r28
    1c10:	e3 5b       	subi	r30, 0xB3	; 179
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	60 81       	ld	r22, Z
    1c16:	71 81       	ldd	r23, Z+1	; 0x01
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	93 81       	ldd	r25, Z+3	; 0x03
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	40 e8       	ldi	r20, 0x80	; 128
    1c22:	5f e3       	ldi	r21, 0x3F	; 63
    1c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c28:	88 23       	and	r24, r24
    1c2a:	44 f4       	brge	.+16     	; 0x1c3c <main+0xecc>
		__ticks = 1;
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	e5 5b       	subi	r30, 0xB5	; 181
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	91 83       	std	Z+1, r25	; 0x01
    1c38:	80 83       	st	Z, r24
    1c3a:	64 c0       	rjmp	.+200    	; 0x1d04 <main+0xf94>
	else if (__tmp > 65535)
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e3 5b       	subi	r30, 0xB3	; 179
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	60 81       	ld	r22, Z
    1c44:	71 81       	ldd	r23, Z+1	; 0x01
    1c46:	82 81       	ldd	r24, Z+2	; 0x02
    1c48:	93 81       	ldd	r25, Z+3	; 0x03
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	3f ef       	ldi	r19, 0xFF	; 255
    1c4e:	4f e7       	ldi	r20, 0x7F	; 127
    1c50:	57 e4       	ldi	r21, 0x47	; 71
    1c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c56:	18 16       	cp	r1, r24
    1c58:	0c f0       	brlt	.+2      	; 0x1c5c <main+0xeec>
    1c5a:	43 c0       	rjmp	.+134    	; 0x1ce2 <main+0xf72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	ef 5a       	subi	r30, 0xAF	; 175
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	60 81       	ld	r22, Z
    1c64:	71 81       	ldd	r23, Z+1	; 0x01
    1c66:	82 81       	ldd	r24, Z+2	; 0x02
    1c68:	93 81       	ldd	r25, Z+3	; 0x03
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e2       	ldi	r20, 0x20	; 32
    1c70:	51 e4       	ldi	r21, 0x41	; 65
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	8e 01       	movw	r16, r28
    1c7c:	05 5b       	subi	r16, 0xB5	; 181
    1c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c80:	bc 01       	movw	r22, r24
    1c82:	cd 01       	movw	r24, r26
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	80 83       	st	Z, r24
    1c92:	1f c0       	rjmp	.+62     	; 0x1cd2 <main+0xf62>
    1c94:	fe 01       	movw	r30, r28
    1c96:	e7 5b       	subi	r30, 0xB7	; 183
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	88 ec       	ldi	r24, 0xC8	; 200
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	91 83       	std	Z+1, r25	; 0x01
    1ca0:	80 83       	st	Z, r24
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e7 5b       	subi	r30, 0xB7	; 183
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 81       	ld	r24, Z
    1caa:	91 81       	ldd	r25, Z+1	; 0x01
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <main+0xf3c>
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e7 5b       	subi	r30, 0xB7	; 183
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	91 83       	std	Z+1, r25	; 0x01
    1cb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cba:	de 01       	movw	r26, r28
    1cbc:	a5 5b       	subi	r26, 0xB5	; 181
    1cbe:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e5 5b       	subi	r30, 0xB5	; 181
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 81       	ld	r24, Z
    1cc8:	91 81       	ldd	r25, Z+1	; 0x01
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	11 96       	adiw	r26, 0x01	; 1
    1cce:	9c 93       	st	X, r25
    1cd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	e5 5b       	subi	r30, 0xB5	; 181
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	80 81       	ld	r24, Z
    1cda:	91 81       	ldd	r25, Z+1	; 0x01
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	d1 f6       	brne	.-76     	; 0x1c94 <main+0xf24>
    1ce0:	27 c0       	rjmp	.+78     	; 0x1d30 <main+0xfc0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce2:	8e 01       	movw	r16, r28
    1ce4:	05 5b       	subi	r16, 0xB5	; 181
    1ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce8:	fe 01       	movw	r30, r28
    1cea:	e3 5b       	subi	r30, 0xB3	; 179
    1cec:	ff 4f       	sbci	r31, 0xFF	; 255
    1cee:	60 81       	ld	r22, Z
    1cf0:	71 81       	ldd	r23, Z+1	; 0x01
    1cf2:	82 81       	ldd	r24, Z+2	; 0x02
    1cf4:	93 81       	ldd	r25, Z+3	; 0x03
    1cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	f8 01       	movw	r30, r16
    1d00:	91 83       	std	Z+1, r25	; 0x01
    1d02:	80 83       	st	Z, r24
    1d04:	de 01       	movw	r26, r28
    1d06:	a9 5b       	subi	r26, 0xB9	; 185
    1d08:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e5 5b       	subi	r30, 0xB5	; 181
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 81       	ld	r24, Z
    1d12:	91 81       	ldd	r25, Z+1	; 0x01
    1d14:	8d 93       	st	X+, r24
    1d16:	9c 93       	st	X, r25
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e9 5b       	subi	r30, 0xB9	; 185
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <main+0xfb2>
    1d26:	fe 01       	movw	r30, r28
    1d28:	e9 5b       	subi	r30, 0xB9	; 185
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	91 83       	std	Z+1, r25	; 0x01
    1d2e:	80 83       	st	Z, r24
							}
							_delay_ms(100); //new button every 100ms
						}
						if(KeyPad_getPressedKey() == 13) //When Press ON Key From KeyPad
						{
							for(i = 0 ; i < 5 ; i++)
    1d30:	de 01       	movw	r26, r28
    1d32:	a6 54       	subi	r26, 0x46	; 70
    1d34:	bf 4f       	sbci	r27, 0xFF	; 255
    1d36:	fe 01       	movw	r30, r28
    1d38:	e6 54       	subi	r30, 0x46	; 70
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8f 5f       	subi	r24, 0xFF	; 255
    1d40:	8c 93       	st	X, r24
    1d42:	fe 01       	movw	r30, r28
    1d44:	e6 54       	subi	r30, 0x46	; 70
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	80 81       	ld	r24, Z
    1d4a:	85 30       	cpi	r24, 0x05	; 5
    1d4c:	08 f4       	brcc	.+2      	; 0x1d50 <main+0xfe0>
    1d4e:	2e cf       	rjmp	.-420    	; 0x1bac <main+0xe3c>
								_delay_ms(100);
							}

						}

						UART_sendByte(M1_READY);  //Send To Mc2 that Mc1 Ready To receive
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>

						//RECEIVE
						for ( i = 0 ; i < 5 ; i++)
    1d56:	fe 01       	movw	r30, r28
    1d58:	e6 54       	subi	r30, 0x46	; 70
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	10 82       	st	Z, r1
    1d5e:	19 c0       	rjmp	.+50     	; 0x1d92 <main+0x1022>
						{
							pwback[i] = UART_recieveByte(); //Receiving Pw From EEPROM From MC2
    1d60:	fe 01       	movw	r30, r28
    1d62:	e6 54       	subi	r30, 0x46	; 70
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	08 2f       	mov	r16, r24
    1d6a:	10 e0       	ldi	r17, 0x00	; 0
    1d6c:	0e 94 43 18 	call	0x3086	; 0x3086 <UART_recieveByte>
    1d70:	28 2f       	mov	r18, r24
    1d72:	ce 01       	movw	r24, r28
    1d74:	8f 53       	subi	r24, 0x3F	; 63
    1d76:	9f 4f       	sbci	r25, 0xFF	; 255
    1d78:	fc 01       	movw	r30, r24
    1d7a:	e0 0f       	add	r30, r16
    1d7c:	f1 1f       	adc	r31, r17
    1d7e:	20 83       	st	Z, r18
						}

						UART_sendByte(M1_READY);  //Send To Mc2 that Mc1 Ready To receive

						//RECEIVE
						for ( i = 0 ; i < 5 ; i++)
    1d80:	de 01       	movw	r26, r28
    1d82:	a6 54       	subi	r26, 0x46	; 70
    1d84:	bf 4f       	sbci	r27, 0xFF	; 255
    1d86:	fe 01       	movw	r30, r28
    1d88:	e6 54       	subi	r30, 0x46	; 70
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8f 5f       	subi	r24, 0xFF	; 255
    1d90:	8c 93       	st	X, r24
    1d92:	fe 01       	movw	r30, r28
    1d94:	e6 54       	subi	r30, 0x46	; 70
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	80 81       	ld	r24, Z
    1d9a:	85 30       	cpi	r24, 0x05	; 5
    1d9c:	08 f3       	brcs	.-62     	; 0x1d60 <main+0xff0>
						{
							pwback[i] = UART_recieveByte(); //Receiving Pw From EEPROM From MC2
						}


						LCD_clearScreen();  //clear lcd screen
    1d9e:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
						LCD_displayString("ENTER SAME PW"); //display string on lcd
    1da2:	80 e8       	ldi	r24, 0x80	; 128
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
						LCD_goToRowColumn(1,0);
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	0e 94 42 17 	call	0x2e84	; 0x2e84 <LCD_goToRowColumn>
    1db2:	7e c1       	rjmp	.+764    	; 0x20b0 <main+0x1340>

						while(Conifirmation_flag == 0) //condition for Entering the loop
						{
							for(i = 0 ; i < 5 ; i++)
    1db4:	fe 01       	movw	r30, r28
    1db6:	e6 54       	subi	r30, 0x46	; 70
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	10 82       	st	Z, r1
    1dbc:	ae c0       	rjmp	.+348    	; 0x1f1a <main+0x11aa>
							{
								key = KeyPad_getPressedKey(); //get the key From Keypad
    1dbe:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e5 54       	subi	r30, 0x45	; 69
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 83       	st	Z, r24
								if((key >= 0) && (key <= 9)) //check the key if it number or not
    1dca:	fe 01       	movw	r30, r28
    1dcc:	e5 54       	subi	r30, 0x45	; 69
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	80 81       	ld	r24, Z
    1dd2:	8a 30       	cpi	r24, 0x0A	; 10
    1dd4:	a0 f4       	brcc	.+40     	; 0x1dfe <main+0x108e>
								{
									password[i] = key;  //Save the key in an Array of Password
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	e6 54       	subi	r30, 0x46	; 70
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	80 81       	ld	r24, Z
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	ce 01       	movw	r24, r28
    1de4:	8a 53       	subi	r24, 0x3A	; 58
    1de6:	9f 4f       	sbci	r25, 0xFF	; 255
    1de8:	dc 01       	movw	r26, r24
    1dea:	a2 0f       	add	r26, r18
    1dec:	b3 1f       	adc	r27, r19
    1dee:	fe 01       	movw	r30, r28
    1df0:	e5 54       	subi	r30, 0x45	; 69
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	80 81       	ld	r24, Z
    1df6:	8c 93       	st	X, r24
									LCD_displayCharacter('#'); //display pw in #
    1df8:	83 e2       	ldi	r24, 0x23	; 35
    1dfa:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <LCD_displayCharacter>
    1dfe:	fe 01       	movw	r30, r28
    1e00:	ed 5b       	subi	r30, 0xBD	; 189
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a8 ec       	ldi	r26, 0xC8	; 200
    1e0a:	b2 e4       	ldi	r27, 0x42	; 66
    1e0c:	80 83       	st	Z, r24
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	a2 83       	std	Z+2, r26	; 0x02
    1e12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e14:	8e 01       	movw	r16, r28
    1e16:	01 5c       	subi	r16, 0xC1	; 193
    1e18:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ed 5b       	subi	r30, 0xBD	; 189
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	60 81       	ld	r22, Z
    1e22:	71 81       	ldd	r23, Z+1	; 0x01
    1e24:	82 81       	ldd	r24, Z+2	; 0x02
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4a ef       	ldi	r20, 0xFA	; 250
    1e2e:	54 e4       	ldi	r21, 0x44	; 68
    1e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	f8 01       	movw	r30, r16
    1e3a:	80 83       	st	Z, r24
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	a2 83       	std	Z+2, r26	; 0x02
    1e40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e42:	fe 01       	movw	r30, r28
    1e44:	ff 96       	adiw	r30, 0x3f	; 63
    1e46:	60 81       	ld	r22, Z
    1e48:	71 81       	ldd	r23, Z+1	; 0x01
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	93 81       	ldd	r25, Z+3	; 0x03
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5a:	88 23       	and	r24, r24
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <main+0x10f8>
		__ticks = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9e af       	std	Y+62, r25	; 0x3e
    1e64:	8d af       	std	Y+61, r24	; 0x3d
    1e66:	46 c0       	rjmp	.+140    	; 0x1ef4 <main+0x1184>
	else if (__tmp > 65535)
    1e68:	fe 01       	movw	r30, r28
    1e6a:	ff 96       	adiw	r30, 0x3f	; 63
    1e6c:	60 81       	ld	r22, Z
    1e6e:	71 81       	ldd	r23, Z+1	; 0x01
    1e70:	82 81       	ldd	r24, Z+2	; 0x02
    1e72:	93 81       	ldd	r25, Z+3	; 0x03
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	3f ef       	ldi	r19, 0xFF	; 255
    1e78:	4f e7       	ldi	r20, 0x7F	; 127
    1e7a:	57 e4       	ldi	r21, 0x47	; 71
    1e7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e80:	18 16       	cp	r1, r24
    1e82:	64 f5       	brge	.+88     	; 0x1edc <main+0x116c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e84:	fe 01       	movw	r30, r28
    1e86:	ed 5b       	subi	r30, 0xBD	; 189
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	60 81       	ld	r22, Z
    1e8c:	71 81       	ldd	r23, Z+1	; 0x01
    1e8e:	82 81       	ldd	r24, Z+2	; 0x02
    1e90:	93 81       	ldd	r25, Z+3	; 0x03
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e2       	ldi	r20, 0x20	; 32
    1e98:	51 e4       	ldi	r21, 0x41	; 65
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	9e af       	std	Y+62, r25	; 0x3e
    1eb0:	8d af       	std	Y+61, r24	; 0x3d
    1eb2:	0f c0       	rjmp	.+30     	; 0x1ed2 <main+0x1162>
    1eb4:	88 ec       	ldi	r24, 0xC8	; 200
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9c af       	std	Y+60, r25	; 0x3c
    1eba:	8b af       	std	Y+59, r24	; 0x3b
    1ebc:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ebe:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <main+0x1150>
    1ec4:	9c af       	std	Y+60, r25	; 0x3c
    1ec6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eca:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	9e af       	std	Y+62, r25	; 0x3e
    1ed0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ed4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	69 f7       	brne	.-38     	; 0x1eb4 <main+0x1144>
    1eda:	16 c0       	rjmp	.+44     	; 0x1f08 <main+0x1198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1edc:	fe 01       	movw	r30, r28
    1ede:	ff 96       	adiw	r30, 0x3f	; 63
    1ee0:	60 81       	ld	r22, Z
    1ee2:	71 81       	ldd	r23, Z+1	; 0x01
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	93 81       	ldd	r25, Z+3	; 0x03
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9e af       	std	Y+62, r25	; 0x3e
    1ef2:	8d af       	std	Y+61, r24	; 0x3d
    1ef4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ef6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ef8:	9a af       	std	Y+58, r25	; 0x3a
    1efa:	89 af       	std	Y+57, r24	; 0x39
    1efc:	89 ad       	ldd	r24, Y+57	; 0x39
    1efe:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <main+0x1190>
    1f04:	9a af       	std	Y+58, r25	; 0x3a
    1f06:	89 af       	std	Y+57, r24	; 0x39
						LCD_displayString("ENTER SAME PW"); //display string on lcd
						LCD_goToRowColumn(1,0);

						while(Conifirmation_flag == 0) //condition for Entering the loop
						{
							for(i = 0 ; i < 5 ; i++)
    1f08:	de 01       	movw	r26, r28
    1f0a:	a6 54       	subi	r26, 0x46	; 70
    1f0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f0e:	fe 01       	movw	r30, r28
    1f10:	e6 54       	subi	r30, 0x46	; 70
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	80 81       	ld	r24, Z
    1f16:	8f 5f       	subi	r24, 0xFF	; 255
    1f18:	8c 93       	st	X, r24
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e6 54       	subi	r30, 0x46	; 70
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 81       	ld	r24, Z
    1f22:	85 30       	cpi	r24, 0x05	; 5
    1f24:	08 f4       	brcc	.+2      	; 0x1f28 <main+0x11b8>
    1f26:	4b cf       	rjmp	.-362    	; 0x1dbe <main+0x104e>
									password[i] = key;  //Save the key in an Array of Password
									LCD_displayCharacter('#'); //display pw in #
								}
								_delay_ms(100); //new button every 100ms
							}
							if(KeyPad_getPressedKey() == 13) //if ON key is pressed from the Keypad
    1f28:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1f2c:	8d 30       	cpi	r24, 0x0D	; 13
    1f2e:	09 f0       	breq	.+2      	; 0x1f32 <main+0x11c2>
    1f30:	bf c0       	rjmp	.+382    	; 0x20b0 <main+0x1340>
							{
								//Compare The Entered PW With pw that stored in EEPROM in MC2
								if(pwback[0] == password[0] && pwback[1] == password[1] && pwback[2] == password[2] && pwback[3] == password[3] && pwback[4] == password[4] )
    1f32:	fe 01       	movw	r30, r28
    1f34:	ef 53       	subi	r30, 0x3F	; 63
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	90 81       	ld	r25, Z
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	ea 53       	subi	r30, 0x3A	; 58
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 81       	ld	r24, Z
    1f42:	98 17       	cp	r25, r24
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <main+0x11d8>
    1f46:	aa c0       	rjmp	.+340    	; 0x209c <main+0x132c>
    1f48:	fe 01       	movw	r30, r28
    1f4a:	ef 53       	subi	r30, 0x3F	; 63
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	91 81       	ldd	r25, Z+1	; 0x01
    1f50:	fe 01       	movw	r30, r28
    1f52:	ea 53       	subi	r30, 0x3A	; 58
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	81 81       	ldd	r24, Z+1	; 0x01
    1f58:	98 17       	cp	r25, r24
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <main+0x11ee>
    1f5c:	9f c0       	rjmp	.+318    	; 0x209c <main+0x132c>
    1f5e:	fe 01       	movw	r30, r28
    1f60:	ef 53       	subi	r30, 0x3F	; 63
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	92 81       	ldd	r25, Z+2	; 0x02
    1f66:	fe 01       	movw	r30, r28
    1f68:	ea 53       	subi	r30, 0x3A	; 58
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	82 81       	ldd	r24, Z+2	; 0x02
    1f6e:	98 17       	cp	r25, r24
    1f70:	09 f0       	breq	.+2      	; 0x1f74 <main+0x1204>
    1f72:	94 c0       	rjmp	.+296    	; 0x209c <main+0x132c>
    1f74:	fe 01       	movw	r30, r28
    1f76:	ef 53       	subi	r30, 0x3F	; 63
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	ea 53       	subi	r30, 0x3A	; 58
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	83 81       	ldd	r24, Z+3	; 0x03
    1f84:	98 17       	cp	r25, r24
    1f86:	09 f0       	breq	.+2      	; 0x1f8a <main+0x121a>
    1f88:	89 c0       	rjmp	.+274    	; 0x209c <main+0x132c>
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	ef 53       	subi	r30, 0x3F	; 63
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	94 81       	ldd	r25, Z+4	; 0x04
    1f92:	fe 01       	movw	r30, r28
    1f94:	ea 53       	subi	r30, 0x3A	; 58
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	84 81       	ldd	r24, Z+4	; 0x04
    1f9a:	98 17       	cp	r25, r24
    1f9c:	09 f0       	breq	.+2      	; 0x1fa0 <main+0x1230>
    1f9e:	7e c0       	rjmp	.+252    	; 0x209c <main+0x132c>
								{
									LCD_clearScreen(); //clear lcd screen
    1fa0:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
									LCD_displayString("DONE"); //display string on lcd
    1fa4:	8e e8       	ldi	r24, 0x8E	; 142
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a8 ec       	ldi	r26, 0xC8	; 200
    1fb2:	b3 e4       	ldi	r27, 0x43	; 67
    1fb4:	8d ab       	std	Y+53, r24	; 0x35
    1fb6:	9e ab       	std	Y+54, r25	; 0x36
    1fb8:	af ab       	std	Y+55, r26	; 0x37
    1fba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbc:	6d a9       	ldd	r22, Y+53	; 0x35
    1fbe:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc0:	8f a9       	ldd	r24, Y+55	; 0x37
    1fc2:	98 ad       	ldd	r25, Y+56	; 0x38
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	4a ef       	ldi	r20, 0xFA	; 250
    1fca:	54 e4       	ldi	r21, 0x44	; 68
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	89 ab       	std	Y+49, r24	; 0x31
    1fd6:	9a ab       	std	Y+50, r25	; 0x32
    1fd8:	ab ab       	std	Y+51, r26	; 0x33
    1fda:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fdc:	69 a9       	ldd	r22, Y+49	; 0x31
    1fde:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e8       	ldi	r20, 0x80	; 128
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <main+0x128e>
		__ticks = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	98 ab       	std	Y+48, r25	; 0x30
    1ffa:	8f a7       	std	Y+47, r24	; 0x2f
    1ffc:	3f c0       	rjmp	.+126    	; 0x207c <main+0x130c>
	else if (__tmp > 65535)
    1ffe:	69 a9       	ldd	r22, Y+49	; 0x31
    2000:	7a a9       	ldd	r23, Y+50	; 0x32
    2002:	8b a9       	ldd	r24, Y+51	; 0x33
    2004:	9c a9       	ldd	r25, Y+52	; 0x34
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	3f ef       	ldi	r19, 0xFF	; 255
    200a:	4f e7       	ldi	r20, 0x7F	; 127
    200c:	57 e4       	ldi	r21, 0x47	; 71
    200e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2012:	18 16       	cp	r1, r24
    2014:	4c f5       	brge	.+82     	; 0x2068 <main+0x12f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2016:	6d a9       	ldd	r22, Y+53	; 0x35
    2018:	7e a9       	ldd	r23, Y+54	; 0x36
    201a:	8f a9       	ldd	r24, Y+55	; 0x37
    201c:	98 ad       	ldd	r25, Y+56	; 0x38
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e2       	ldi	r20, 0x20	; 32
    2024:	51 e4       	ldi	r21, 0x41	; 65
    2026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	98 ab       	std	Y+48, r25	; 0x30
    203c:	8f a7       	std	Y+47, r24	; 0x2f
    203e:	0f c0       	rjmp	.+30     	; 0x205e <main+0x12ee>
    2040:	88 ec       	ldi	r24, 0xC8	; 200
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9e a7       	std	Y+46, r25	; 0x2e
    2046:	8d a7       	std	Y+45, r24	; 0x2d
    2048:	8d a5       	ldd	r24, Y+45	; 0x2d
    204a:	9e a5       	ldd	r25, Y+46	; 0x2e
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <main+0x12dc>
    2050:	9e a7       	std	Y+46, r25	; 0x2e
    2052:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2054:	8f a5       	ldd	r24, Y+47	; 0x2f
    2056:	98 a9       	ldd	r25, Y+48	; 0x30
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	98 ab       	std	Y+48, r25	; 0x30
    205c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2060:	98 a9       	ldd	r25, Y+48	; 0x30
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	69 f7       	brne	.-38     	; 0x2040 <main+0x12d0>
    2066:	14 c0       	rjmp	.+40     	; 0x2090 <main+0x1320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2068:	69 a9       	ldd	r22, Y+49	; 0x31
    206a:	7a a9       	ldd	r23, Y+50	; 0x32
    206c:	8b a9       	ldd	r24, Y+51	; 0x33
    206e:	9c a9       	ldd	r25, Y+52	; 0x34
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	98 ab       	std	Y+48, r25	; 0x30
    207a:	8f a7       	std	Y+47, r24	; 0x2f
    207c:	8f a5       	ldd	r24, Y+47	; 0x2f
    207e:	98 a9       	ldd	r25, Y+48	; 0x30
    2080:	9c a7       	std	Y+44, r25	; 0x2c
    2082:	8b a7       	std	Y+43, r24	; 0x2b
    2084:	8b a5       	ldd	r24, Y+43	; 0x2b
    2086:	9c a5       	ldd	r25, Y+44	; 0x2c
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <main+0x1318>
    208c:	9c a7       	std	Y+44, r25	; 0x2c
    208e:	8b a7       	std	Y+43, r24	; 0x2b
									_delay_ms(400); //delay 400 ms
									Conifirmation_flag = 1; //Set that flag means pw check complete
    2090:	fe 01       	movw	r30, r28
    2092:	e7 54       	subi	r30, 0x47	; 71
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	80 83       	st	Z, r24
    209a:	0a c0       	rjmp	.+20     	; 0x20b0 <main+0x1340>
									//now you can Exit from the loop
								}
								else
								{
									LCD_clearScreen(); //clear lcd screen
    209c:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
									LCD_displayString("RE-ENTER THE PW"); //display string on lcd
    20a0:	83 e9       	ldi	r24, 0x93	; 147
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
									LCD_goToRowColumn(1,0);
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	0e 94 42 17 	call	0x2e84	; 0x2e84 <LCD_goToRowColumn>

						LCD_clearScreen();  //clear lcd screen
						LCD_displayString("ENTER SAME PW"); //display string on lcd
						LCD_goToRowColumn(1,0);

						while(Conifirmation_flag == 0) //condition for Entering the loop
    20b0:	fe 01       	movw	r30, r28
    20b2:	e7 54       	subi	r30, 0x47	; 71
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	88 23       	and	r24, r24
    20ba:	09 f4       	brne	.+2      	; 0x20be <main+0x134e>
    20bc:	7b ce       	rjmp	.-778    	; 0x1db4 <main+0x1044>

							}
						}
						//The Flag is Still Zero means user entered confirmation pw wrong
						//and the User will Enter confirmation PW Again
						Conifirmation_flag = 0;
    20be:	fe 01       	movw	r30, r28
    20c0:	e7 54       	subi	r30, 0x47	; 71
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	10 82       	st	Z, r1
    20c6:	9d c0       	rjmp	.+314    	; 0x2202 <main+0x1492>
					}

					else
					{
						LCD_clearScreen(); //clear lcd screen
    20c8:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
						LCD_displayString("INCORRECT PW"); //display string on lcd
    20cc:	8b ed       	ldi	r24, 0xDB	; 219
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	aa ef       	ldi	r26, 0xFA	; 250
    20da:	b3 e4       	ldi	r27, 0x43	; 67
    20dc:	8f a3       	std	Y+39, r24	; 0x27
    20de:	98 a7       	std	Y+40, r25	; 0x28
    20e0:	a9 a7       	std	Y+41, r26	; 0x29
    20e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e4:	6f a1       	ldd	r22, Y+39	; 0x27
    20e6:	78 a5       	ldd	r23, Y+40	; 0x28
    20e8:	89 a5       	ldd	r24, Y+41	; 0x29
    20ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a ef       	ldi	r20, 0xFA	; 250
    20f2:	54 e4       	ldi	r21, 0x44	; 68
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	8b a3       	std	Y+35, r24	; 0x23
    20fe:	9c a3       	std	Y+36, r25	; 0x24
    2100:	ad a3       	std	Y+37, r26	; 0x25
    2102:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2104:	6b a1       	ldd	r22, Y+35	; 0x23
    2106:	7c a1       	ldd	r23, Y+36	; 0x24
    2108:	8d a1       	ldd	r24, Y+37	; 0x25
    210a:	9e a1       	ldd	r25, Y+38	; 0x26
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e8       	ldi	r20, 0x80	; 128
    2112:	5f e3       	ldi	r21, 0x3F	; 63
    2114:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2118:	88 23       	and	r24, r24
    211a:	2c f4       	brge	.+10     	; 0x2126 <main+0x13b6>
		__ticks = 1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9a a3       	std	Y+34, r25	; 0x22
    2122:	89 a3       	std	Y+33, r24	; 0x21
    2124:	3f c0       	rjmp	.+126    	; 0x21a4 <main+0x1434>
	else if (__tmp > 65535)
    2126:	6b a1       	ldd	r22, Y+35	; 0x23
    2128:	7c a1       	ldd	r23, Y+36	; 0x24
    212a:	8d a1       	ldd	r24, Y+37	; 0x25
    212c:	9e a1       	ldd	r25, Y+38	; 0x26
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	3f ef       	ldi	r19, 0xFF	; 255
    2132:	4f e7       	ldi	r20, 0x7F	; 127
    2134:	57 e4       	ldi	r21, 0x47	; 71
    2136:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    213a:	18 16       	cp	r1, r24
    213c:	4c f5       	brge	.+82     	; 0x2190 <main+0x1420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213e:	6f a1       	ldd	r22, Y+39	; 0x27
    2140:	78 a5       	ldd	r23, Y+40	; 0x28
    2142:	89 a5       	ldd	r24, Y+41	; 0x29
    2144:	9a a5       	ldd	r25, Y+42	; 0x2a
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e2       	ldi	r20, 0x20	; 32
    214c:	51 e4       	ldi	r21, 0x41	; 65
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9a a3       	std	Y+34, r25	; 0x22
    2164:	89 a3       	std	Y+33, r24	; 0x21
    2166:	0f c0       	rjmp	.+30     	; 0x2186 <main+0x1416>
    2168:	88 ec       	ldi	r24, 0xC8	; 200
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	98 a3       	std	Y+32, r25	; 0x20
    216e:	8f 8f       	std	Y+31, r24	; 0x1f
    2170:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2172:	98 a1       	ldd	r25, Y+32	; 0x20
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <main+0x1404>
    2178:	98 a3       	std	Y+32, r25	; 0x20
    217a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217c:	89 a1       	ldd	r24, Y+33	; 0x21
    217e:	9a a1       	ldd	r25, Y+34	; 0x22
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	9a a3       	std	Y+34, r25	; 0x22
    2184:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2186:	89 a1       	ldd	r24, Y+33	; 0x21
    2188:	9a a1       	ldd	r25, Y+34	; 0x22
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	69 f7       	brne	.-38     	; 0x2168 <main+0x13f8>
    218e:	14 c0       	rjmp	.+40     	; 0x21b8 <main+0x1448>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2190:	6b a1       	ldd	r22, Y+35	; 0x23
    2192:	7c a1       	ldd	r23, Y+36	; 0x24
    2194:	8d a1       	ldd	r24, Y+37	; 0x25
    2196:	9e a1       	ldd	r25, Y+38	; 0x26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9a a3       	std	Y+34, r25	; 0x22
    21a2:	89 a3       	std	Y+33, r24	; 0x21
    21a4:	89 a1       	ldd	r24, Y+33	; 0x21
    21a6:	9a a1       	ldd	r25, Y+34	; 0x22
    21a8:	9e 8f       	std	Y+30, r25	; 0x1e
    21aa:	8d 8f       	std	Y+29, r24	; 0x1d
    21ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <main+0x1440>
    21b4:	9e 8f       	std	Y+30, r25	; 0x1e
    21b6:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(500); //delay for 0.5 sec

						error1_counter++; //this error is incremented means that User Enter Wrong PW
    21b8:	de 01       	movw	r26, r28
    21ba:	a9 54       	subi	r26, 0x49	; 73
    21bc:	bf 4f       	sbci	r27, 0xFF	; 255
    21be:	fe 01       	movw	r30, r28
    21c0:	e9 54       	subi	r30, 0x49	; 73
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	80 81       	ld	r24, Z
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
    21c8:	8c 93       	st	X, r24
						if(error1_counter == 3)
    21ca:	fe 01       	movw	r30, r28
    21cc:	e9 54       	subi	r30, 0x49	; 73
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	83 30       	cpi	r24, 0x03	; 3
    21d4:	b1 f4       	brne	.+44     	; 0x2202 <main+0x1492>
						{
							//when User Entered 3 times Wrong PW
							UART_sendByte(BUZZER_RING); //Send To MC2 To Ring BUZZER
    21d6:	84 e0       	ldi	r24, 0x04	; 4
    21d8:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>
							LCD_clearScreen(); //clear lcd screen
    21dc:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
							LCD_displayString("LOCKED FOR 1 min"); //display string on lcd
    21e0:	88 ee       	ldi	r24, 0xE8	; 232
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
							TIMER1_CTC_MODE(); //Activate Timer1
    21e8:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <TIMER1_CTC_MODE>
							while(g_tick != 60)
    21ec:	80 91 24 01 	lds	r24, 0x0124
    21f0:	8c 33       	cpi	r24, 0x3C	; 60
    21f2:	e1 f7       	brne	.-8      	; 0x21ec <main+0x147c>
							{/*JUST WIAT 1 min*/}
							Stop_Timer1(); //Stop Timer1
    21f4:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <Stop_Timer1>
							g_tick = 0; //Clear global tick variable
    21f8:	10 92 24 01 	sts	0x0124, r1
							UART_sendByte(STOP_BUZZER_RING); //Send to Mc2 To Stop the BUZZER
    21fc:	85 e0       	ldi	r24, 0x05	; 5
    21fe:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>
		LCD_goToRowColumn(1,0);
		LCD_displayString("+: OPEN DOOR");

		if(KeyPad_getPressedKey() == '*')   // waiting key  * for changing pw
		{
			while(error1_counter < 3 && done_flag == 0) //condition for Entering the loop
    2202:	fe 01       	movw	r30, r28
    2204:	e9 54       	subi	r30, 0x49	; 73
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	80 81       	ld	r24, Z
    220a:	83 30       	cpi	r24, 0x03	; 3
    220c:	38 f4       	brcc	.+14     	; 0x221c <main+0x14ac>
    220e:	fe 01       	movw	r30, r28
    2210:	e8 54       	subi	r30, 0x48	; 72
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	80 81       	ld	r24, Z
    2216:	88 23       	and	r24, r24
    2218:	09 f4       	brne	.+2      	; 0x221c <main+0x14ac>
    221a:	dd c9       	rjmp	.-3142   	; 0x15d6 <main+0x866>
							UART_sendByte(STOP_BUZZER_RING); //Send to Mc2 To Stop the BUZZER
						}
					}
				}
			}
			error1_counter = 0; //clear number of errors
    221c:	fe 01       	movw	r30, r28
    221e:	e9 54       	subi	r30, 0x49	; 73
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	10 82       	st	Z, r1
			done_flag = 0; //clear done flag to Enter the main menu again
    2224:	fe 01       	movw	r30, r28
    2226:	e8 54       	subi	r30, 0x48	; 72
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	10 82       	st	Z, r1
    222c:	c0 c9       	rjmp	.-3200   	; 0x15ae <main+0x83e>
		}
		else if (KeyPad_getPressedKey() == '+') // waiting key  + Opening the door
    222e:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    2232:	8b 32       	cpi	r24, 0x2B	; 43
    2234:	09 f0       	breq	.+2      	; 0x2238 <main+0x14c8>
    2236:	bb c9       	rjmp	.-3210   	; 0x15ae <main+0x83e>
    2238:	d2 c1       	rjmp	.+932    	; 0x25de <main+0x186e>
		{
			while(error1_counter < 3 && done_flag == 0) //condition for Entering the loop
			{
				LCD_clearScreen(); //clear lcd scrren
    223a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
				LCD_displayString("ENTER YOUR PW"); //display string on lcd screen
    223e:	89 ef       	ldi	r24, 0xF9	; 249
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
				LCD_goToRowColumn(1,0);
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	60 e0       	ldi	r22, 0x00	; 0
    224a:	0e 94 42 17 	call	0x2e84	; 0x2e84 <LCD_goToRowColumn>
				for(i = 0 ; i < 5 ; i++)
    224e:	fe 01       	movw	r30, r28
    2250:	e6 54       	subi	r30, 0x46	; 70
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	10 82       	st	Z, r1
    2256:	9b c0       	rjmp	.+310    	; 0x238e <main+0x161e>
				{
					key = KeyPad_getPressedKey(); //get the key From Keypad
    2258:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    225c:	fe 01       	movw	r30, r28
    225e:	e5 54       	subi	r30, 0x45	; 69
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 83       	st	Z, r24
					if((key >= 0) && (key <= 9)) //check the key is number or not?
    2264:	fe 01       	movw	r30, r28
    2266:	e5 54       	subi	r30, 0x45	; 69
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 81       	ld	r24, Z
    226c:	8a 30       	cpi	r24, 0x0A	; 10
    226e:	a0 f4       	brcc	.+40     	; 0x2298 <main+0x1528>
					{
						password[i] = key;      //Save the key in an Array of Password
    2270:	fe 01       	movw	r30, r28
    2272:	e6 54       	subi	r30, 0x46	; 70
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	80 81       	ld	r24, Z
    2278:	28 2f       	mov	r18, r24
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	ce 01       	movw	r24, r28
    227e:	8a 53       	subi	r24, 0x3A	; 58
    2280:	9f 4f       	sbci	r25, 0xFF	; 255
    2282:	dc 01       	movw	r26, r24
    2284:	a2 0f       	add	r26, r18
    2286:	b3 1f       	adc	r27, r19
    2288:	fe 01       	movw	r30, r28
    228a:	e5 54       	subi	r30, 0x45	; 69
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	80 81       	ld	r24, Z
    2290:	8c 93       	st	X, r24
						LCD_displayCharacter('#');  //display pw in #
    2292:	83 e2       	ldi	r24, 0x23	; 35
    2294:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <LCD_displayCharacter>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	a8 ec       	ldi	r26, 0xC8	; 200
    229e:	b2 e4       	ldi	r27, 0x42	; 66
    22a0:	89 8f       	std	Y+25, r24	; 0x19
    22a2:	9a 8f       	std	Y+26, r25	; 0x1a
    22a4:	ab 8f       	std	Y+27, r26	; 0x1b
    22a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a8:	69 8d       	ldd	r22, Y+25	; 0x19
    22aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	4a ef       	ldi	r20, 0xFA	; 250
    22b6:	54 e4       	ldi	r21, 0x44	; 68
    22b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	8d 8b       	std	Y+21, r24	; 0x15
    22c2:	9e 8b       	std	Y+22, r25	; 0x16
    22c4:	af 8b       	std	Y+23, r26	; 0x17
    22c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22c8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ca:	7e 89       	ldd	r23, Y+22	; 0x16
    22cc:	8f 89       	ldd	r24, Y+23	; 0x17
    22ce:	98 8d       	ldd	r25, Y+24	; 0x18
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e8       	ldi	r20, 0x80	; 128
    22d6:	5f e3       	ldi	r21, 0x3F	; 63
    22d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22dc:	88 23       	and	r24, r24
    22de:	2c f4       	brge	.+10     	; 0x22ea <main+0x157a>
		__ticks = 1;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	9c 8b       	std	Y+20, r25	; 0x14
    22e6:	8b 8b       	std	Y+19, r24	; 0x13
    22e8:	3f c0       	rjmp	.+126    	; 0x2368 <main+0x15f8>
	else if (__tmp > 65535)
    22ea:	6d 89       	ldd	r22, Y+21	; 0x15
    22ec:	7e 89       	ldd	r23, Y+22	; 0x16
    22ee:	8f 89       	ldd	r24, Y+23	; 0x17
    22f0:	98 8d       	ldd	r25, Y+24	; 0x18
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	3f ef       	ldi	r19, 0xFF	; 255
    22f6:	4f e7       	ldi	r20, 0x7F	; 127
    22f8:	57 e4       	ldi	r21, 0x47	; 71
    22fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22fe:	18 16       	cp	r1, r24
    2300:	4c f5       	brge	.+82     	; 0x2354 <main+0x15e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2302:	69 8d       	ldd	r22, Y+25	; 0x19
    2304:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2306:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2308:	9c 8d       	ldd	r25, Y+28	; 0x1c
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e2       	ldi	r20, 0x20	; 32
    2310:	51 e4       	ldi	r21, 0x41	; 65
    2312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9c 8b       	std	Y+20, r25	; 0x14
    2328:	8b 8b       	std	Y+19, r24	; 0x13
    232a:	0f c0       	rjmp	.+30     	; 0x234a <main+0x15da>
    232c:	88 ec       	ldi	r24, 0xC8	; 200
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	9a 8b       	std	Y+18, r25	; 0x12
    2332:	89 8b       	std	Y+17, r24	; 0x11
    2334:	89 89       	ldd	r24, Y+17	; 0x11
    2336:	9a 89       	ldd	r25, Y+18	; 0x12
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <main+0x15c8>
    233c:	9a 8b       	std	Y+18, r25	; 0x12
    233e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2340:	8b 89       	ldd	r24, Y+19	; 0x13
    2342:	9c 89       	ldd	r25, Y+20	; 0x14
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	9c 8b       	std	Y+20, r25	; 0x14
    2348:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234a:	8b 89       	ldd	r24, Y+19	; 0x13
    234c:	9c 89       	ldd	r25, Y+20	; 0x14
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	69 f7       	brne	.-38     	; 0x232c <main+0x15bc>
    2352:	14 c0       	rjmp	.+40     	; 0x237c <main+0x160c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2354:	6d 89       	ldd	r22, Y+21	; 0x15
    2356:	7e 89       	ldd	r23, Y+22	; 0x16
    2358:	8f 89       	ldd	r24, Y+23	; 0x17
    235a:	98 8d       	ldd	r25, Y+24	; 0x18
    235c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	9c 8b       	std	Y+20, r25	; 0x14
    2366:	8b 8b       	std	Y+19, r24	; 0x13
    2368:	8b 89       	ldd	r24, Y+19	; 0x13
    236a:	9c 89       	ldd	r25, Y+20	; 0x14
    236c:	98 8b       	std	Y+16, r25	; 0x10
    236e:	8f 87       	std	Y+15, r24	; 0x0f
    2370:	8f 85       	ldd	r24, Y+15	; 0x0f
    2372:	98 89       	ldd	r25, Y+16	; 0x10
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	f1 f7       	brne	.-4      	; 0x2374 <main+0x1604>
    2378:	98 8b       	std	Y+16, r25	; 0x10
    237a:	8f 87       	std	Y+15, r24	; 0x0f
			while(error1_counter < 3 && done_flag == 0) //condition for Entering the loop
			{
				LCD_clearScreen(); //clear lcd scrren
				LCD_displayString("ENTER YOUR PW"); //display string on lcd screen
				LCD_goToRowColumn(1,0);
				for(i = 0 ; i < 5 ; i++)
    237c:	de 01       	movw	r26, r28
    237e:	a6 54       	subi	r26, 0x46	; 70
    2380:	bf 4f       	sbci	r27, 0xFF	; 255
    2382:	fe 01       	movw	r30, r28
    2384:	e6 54       	subi	r30, 0x46	; 70
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 81       	ld	r24, Z
    238a:	8f 5f       	subi	r24, 0xFF	; 255
    238c:	8c 93       	st	X, r24
    238e:	fe 01       	movw	r30, r28
    2390:	e6 54       	subi	r30, 0x46	; 70
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	80 81       	ld	r24, Z
    2396:	85 30       	cpi	r24, 0x05	; 5
    2398:	08 f4       	brcc	.+2      	; 0x239c <main+0x162c>
    239a:	5e cf       	rjmp	.-324    	; 0x2258 <main+0x14e8>
						password[i] = key;      //Save the key in an Array of Password
						LCD_displayCharacter('#');  //display pw in #
					}
					_delay_ms(100); //new button every 100ms
				}
				if(KeyPad_getPressedKey() == 13)  //if ON key is pressed from the Keypad
    239c:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    23a0:	8d 30       	cpi	r24, 0x0D	; 13
    23a2:	09 f0       	breq	.+2      	; 0x23a6 <main+0x1636>
    23a4:	1c c1       	rjmp	.+568    	; 0x25de <main+0x186e>
				{
					//Compare The Entered PW With pw that stored in EEPROM in MC2
					if(pwback[0] == password[0] && pwback[1] == password[1] && pwback[2] == password[2] && pwback[3] == password[3] && pwback[4] == password[4] )
    23a6:	fe 01       	movw	r30, r28
    23a8:	ef 53       	subi	r30, 0x3F	; 63
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	90 81       	ld	r25, Z
    23ae:	fe 01       	movw	r30, r28
    23b0:	ea 53       	subi	r30, 0x3A	; 58
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	80 81       	ld	r24, Z
    23b6:	98 17       	cp	r25, r24
    23b8:	09 f0       	breq	.+2      	; 0x23bc <main+0x164c>
    23ba:	74 c0       	rjmp	.+232    	; 0x24a4 <main+0x1734>
    23bc:	fe 01       	movw	r30, r28
    23be:	ef 53       	subi	r30, 0x3F	; 63
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	91 81       	ldd	r25, Z+1	; 0x01
    23c4:	fe 01       	movw	r30, r28
    23c6:	ea 53       	subi	r30, 0x3A	; 58
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	81 81       	ldd	r24, Z+1	; 0x01
    23cc:	98 17       	cp	r25, r24
    23ce:	09 f0       	breq	.+2      	; 0x23d2 <main+0x1662>
    23d0:	69 c0       	rjmp	.+210    	; 0x24a4 <main+0x1734>
    23d2:	fe 01       	movw	r30, r28
    23d4:	ef 53       	subi	r30, 0x3F	; 63
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	92 81       	ldd	r25, Z+2	; 0x02
    23da:	fe 01       	movw	r30, r28
    23dc:	ea 53       	subi	r30, 0x3A	; 58
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	82 81       	ldd	r24, Z+2	; 0x02
    23e2:	98 17       	cp	r25, r24
    23e4:	09 f0       	breq	.+2      	; 0x23e8 <main+0x1678>
    23e6:	5e c0       	rjmp	.+188    	; 0x24a4 <main+0x1734>
    23e8:	fe 01       	movw	r30, r28
    23ea:	ef 53       	subi	r30, 0x3F	; 63
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	93 81       	ldd	r25, Z+3	; 0x03
    23f0:	fe 01       	movw	r30, r28
    23f2:	ea 53       	subi	r30, 0x3A	; 58
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	83 81       	ldd	r24, Z+3	; 0x03
    23f8:	98 17       	cp	r25, r24
    23fa:	09 f0       	breq	.+2      	; 0x23fe <main+0x168e>
    23fc:	53 c0       	rjmp	.+166    	; 0x24a4 <main+0x1734>
    23fe:	fe 01       	movw	r30, r28
    2400:	ef 53       	subi	r30, 0x3F	; 63
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	94 81       	ldd	r25, Z+4	; 0x04
    2406:	fe 01       	movw	r30, r28
    2408:	ea 53       	subi	r30, 0x3A	; 58
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	84 81       	ldd	r24, Z+4	; 0x04
    240e:	98 17       	cp	r25, r24
    2410:	09 f0       	breq	.+2      	; 0x2414 <main+0x16a4>
    2412:	48 c0       	rjmp	.+144    	; 0x24a4 <main+0x1734>
					{
						LCD_clearScreen();  //clear lcd screen
    2414:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
						LCD_displayString("OPENING");  //display strin on lcd
    2418:	87 e0       	ldi	r24, 0x07	; 7
    241a:	91 e0       	ldi	r25, 0x01	; 1
    241c:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>

						UART_sendByte(OPEN_THE_DOOR); //Send request to Mc2 to OPEN THE DOOR
    2420:	87 e0       	ldi	r24, 0x07	; 7
    2422:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>
						TIMER1_CTC_MODE();    //Activate Timer1
    2426:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <TIMER1_CTC_MODE>
						while(g_tick != 15)
    242a:	80 91 24 01 	lds	r24, 0x0124
    242e:	8f 30       	cpi	r24, 0x0F	; 15
    2430:	e1 f7       	brne	.-8      	; 0x242a <main+0x16ba>
						{/*JUST WIAT 15 sec*/}
						Stop_Timer1();  //stop Timer1
    2432:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <Stop_Timer1>
						g_tick = 0; //clear global variable tick
    2436:	10 92 24 01 	sts	0x0124, r1
						UART_sendByte(OK); //Send to MC2 To stop opening the door
    243a:	89 e0       	ldi	r24, 0x09	; 9
    243c:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>

						LCD_clearScreen(); //clear lcd screen
    2440:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
						LCD_displayString("HOLD"); //display string on lcd
    2444:	8f e0       	ldi	r24, 0x0F	; 15
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>

						UART_sendByte(HOLD); //Send request to MC2 to HOLD for 3 sec
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>
						TIMER1_CTC_MODE(); //Activate TIMER1
    2452:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <TIMER1_CTC_MODE>
						while(g_tick != 3)
    2456:	80 91 24 01 	lds	r24, 0x0124
    245a:	83 30       	cpi	r24, 0x03	; 3
    245c:	e1 f7       	brne	.-8      	; 0x2456 <main+0x16e6>
						{/*JUST WIAT 3 sec*/}
						Stop_Timer1(); //stop TIMER1
    245e:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <Stop_Timer1>
						g_tick = 0; //Clear Global variable tick
    2462:	10 92 24 01 	sts	0x0124, r1
						UART_sendByte(OK); //send to MC2 to stop HOLDING
    2466:	89 e0       	ldi	r24, 0x09	; 9
    2468:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>

						LCD_clearScreen(); //clear lcd screen
    246c:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
						LCD_displayString("CLOSING"); //display string on lcd
    2470:	84 e1       	ldi	r24, 0x14	; 20
    2472:	91 e0       	ldi	r25, 0x01	; 1
    2474:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>

						UART_sendByte(CLOSE_THE_DOOR); //send request to MC2 TO CLOSE THE DOOR
    2478:	88 e0       	ldi	r24, 0x08	; 8
    247a:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>
						TIMER1_CTC_MODE(); //Activate TIMER1
    247e:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <TIMER1_CTC_MODE>
						while(g_tick != 15)
    2482:	80 91 24 01 	lds	r24, 0x0124
    2486:	8f 30       	cpi	r24, 0x0F	; 15
    2488:	e1 f7       	brne	.-8      	; 0x2482 <main+0x1712>
						{/*JUST WIAT 15 sec*/}
						Stop_Timer1(); //Stop TIMER1
    248a:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <Stop_Timer1>
						g_tick = 0; //Clear global Variable Tick
    248e:	10 92 24 01 	sts	0x0124, r1
						UART_sendByte(OK); //send to MC2 to stop CLOSING THE DOOR
    2492:	89 e0       	ldi	r24, 0x09	; 9
    2494:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>

						done_flag = 1; //process complete (OPENING ,HOLD,CLOSING)
    2498:	fe 01       	movw	r30, r28
    249a:	e8 54       	subi	r30, 0x48	; 72
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	80 83       	st	Z, r24
    24a2:	9d c0       	rjmp	.+314    	; 0x25de <main+0x186e>

					}
					else
					{
						LCD_clearScreen(); //clear lcd screen
    24a4:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
						LCD_displayString("INCORRECT PW"); // display string on lcd
    24a8:	8b ed       	ldi	r24, 0xDB	; 219
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	aa ef       	ldi	r26, 0xFA	; 250
    24b6:	b3 e4       	ldi	r27, 0x43	; 67
    24b8:	8b 87       	std	Y+11, r24	; 0x0b
    24ba:	9c 87       	std	Y+12, r25	; 0x0c
    24bc:	ad 87       	std	Y+13, r26	; 0x0d
    24be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	4a ef       	ldi	r20, 0xFA	; 250
    24ce:	54 e4       	ldi	r21, 0x44	; 68
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	8f 83       	std	Y+7, r24	; 0x07
    24da:	98 87       	std	Y+8, r25	; 0x08
    24dc:	a9 87       	std	Y+9, r26	; 0x09
    24de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24e0:	6f 81       	ldd	r22, Y+7	; 0x07
    24e2:	78 85       	ldd	r23, Y+8	; 0x08
    24e4:	89 85       	ldd	r24, Y+9	; 0x09
    24e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	2c f4       	brge	.+10     	; 0x2502 <main+0x1792>
		__ticks = 1;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
    2500:	3f c0       	rjmp	.+126    	; 0x2580 <main+0x1810>
	else if (__tmp > 65535)
    2502:	6f 81       	ldd	r22, Y+7	; 0x07
    2504:	78 85       	ldd	r23, Y+8	; 0x08
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	3f ef       	ldi	r19, 0xFF	; 255
    250e:	4f e7       	ldi	r20, 0x7F	; 127
    2510:	57 e4       	ldi	r21, 0x47	; 71
    2512:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2516:	18 16       	cp	r1, r24
    2518:	4c f5       	brge	.+82     	; 0x256c <main+0x17fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251a:	6b 85       	ldd	r22, Y+11	; 0x0b
    251c:	7c 85       	ldd	r23, Y+12	; 0x0c
    251e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2520:	9e 85       	ldd	r25, Y+14	; 0x0e
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e2       	ldi	r20, 0x20	; 32
    2528:	51 e4       	ldi	r21, 0x41	; 65
    252a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	0f c0       	rjmp	.+30     	; 0x2562 <main+0x17f2>
    2544:	88 ec       	ldi	r24, 0xC8	; 200
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	9c 83       	std	Y+4, r25	; 0x04
    254a:	8b 83       	std	Y+3, r24	; 0x03
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <main+0x17e0>
    2554:	9c 83       	std	Y+4, r25	; 0x04
    2556:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2558:	8d 81       	ldd	r24, Y+5	; 0x05
    255a:	9e 81       	ldd	r25, Y+6	; 0x06
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2562:	8d 81       	ldd	r24, Y+5	; 0x05
    2564:	9e 81       	ldd	r25, Y+6	; 0x06
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	69 f7       	brne	.-38     	; 0x2544 <main+0x17d4>
    256a:	14 c0       	rjmp	.+40     	; 0x2594 <main+0x1824>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256c:	6f 81       	ldd	r22, Y+7	; 0x07
    256e:	78 85       	ldd	r23, Y+8	; 0x08
    2570:	89 85       	ldd	r24, Y+9	; 0x09
    2572:	9a 85       	ldd	r25, Y+10	; 0x0a
    2574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	8d 83       	std	Y+5, r24	; 0x05
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	9a 83       	std	Y+2, r25	; 0x02
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	9a 81       	ldd	r25, Y+2	; 0x02
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <main+0x181c>
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(500); //delay for 0.5 sec
						error1_counter++; //this error is incremented means that User Enter Wrong PW
    2594:	de 01       	movw	r26, r28
    2596:	a9 54       	subi	r26, 0x49	; 73
    2598:	bf 4f       	sbci	r27, 0xFF	; 255
    259a:	fe 01       	movw	r30, r28
    259c:	e9 54       	subi	r30, 0x49	; 73
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	80 81       	ld	r24, Z
    25a2:	8f 5f       	subi	r24, 0xFF	; 255
    25a4:	8c 93       	st	X, r24
						if(error1_counter == 3)
    25a6:	fe 01       	movw	r30, r28
    25a8:	e9 54       	subi	r30, 0x49	; 73
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	80 81       	ld	r24, Z
    25ae:	83 30       	cpi	r24, 0x03	; 3
    25b0:	b1 f4       	brne	.+44     	; 0x25de <main+0x186e>
						{
							//when User Entered 3 times Wrong PW
							LCD_clearScreen(); //clear lcd screen
    25b2:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_clearScreen>
							LCD_displayString("LOCKED FOR 1 min"); //display string on lcd
    25b6:	88 ee       	ldi	r24, 0xE8	; 232
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
							UART_sendByte(BUZZER_RING); //send to MC2 to START BUZZER
    25be:	84 e0       	ldi	r24, 0x04	; 4
    25c0:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>
							TIMER1_CTC_MODE(); //Activate Timer1
    25c4:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <TIMER1_CTC_MODE>
							while(g_tick != 60)
    25c8:	80 91 24 01 	lds	r24, 0x0124
    25cc:	8c 33       	cpi	r24, 0x3C	; 60
    25ce:	e1 f7       	brne	.-8      	; 0x25c8 <main+0x1858>
							{/*JUST WIAT 1 min*/}
							Stop_Timer1(); //stop  TIMER1
    25d0:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <Stop_Timer1>
							g_tick = 0; //clear global variable tick
    25d4:	10 92 24 01 	sts	0x0124, r1
							UART_sendByte(STOP_BUZZER_RING); //send to MC2 to Stop BUZZER
    25d8:	85 e0       	ldi	r24, 0x05	; 5
    25da:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>
			error1_counter = 0; //clear number of errors
			done_flag = 0; //clear done flag to Enter the main menu again
		}
		else if (KeyPad_getPressedKey() == '+') // waiting key  + Opening the door
		{
			while(error1_counter < 3 && done_flag == 0) //condition for Entering the loop
    25de:	fe 01       	movw	r30, r28
    25e0:	e9 54       	subi	r30, 0x49	; 73
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	83 30       	cpi	r24, 0x03	; 3
    25e8:	38 f4       	brcc	.+14     	; 0x25f8 <main+0x1888>
    25ea:	fe 01       	movw	r30, r28
    25ec:	e8 54       	subi	r30, 0x48	; 72
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	80 81       	ld	r24, Z
    25f2:	88 23       	and	r24, r24
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <main+0x1888>
    25f6:	21 ce       	rjmp	.-958    	; 0x223a <main+0x14ca>

						}
					}
				}
			}
			error1_counter = 0; //clear number of errors
    25f8:	fe 01       	movw	r30, r28
    25fa:	e9 54       	subi	r30, 0x49	; 73
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	10 82       	st	Z, r1
			done_flag = 0; //clear done flag to Enter the main menu again
    2600:	fe 01       	movw	r30, r28
    2602:	e8 54       	subi	r30, 0x48	; 72
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	10 82       	st	Z, r1
    2608:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <main+0x83e>

0000260c <LCD_init>:
#include <stdlib.h>
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    2614:	e4 e3       	ldi	r30, 0x34	; 52
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	8f ef       	ldi	r24, 0xFF	; 255
    261a:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    261c:	a1 e3       	ldi	r26, 0x31	; 49
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	e1 e3       	ldi	r30, 0x31	; 49
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	80 67       	ori	r24, 0x70	; 112
    2628:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    262a:	88 e3       	ldi	r24, 0x38	; 56
    262c:	0e 94 21 13 	call	0x2642	; 0x2642 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    2630:	8c e0       	ldi	r24, 0x0C	; 12
    2632:	0e 94 21 13 	call	0x2642	; 0x2642 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	0e 94 21 13 	call	0x2642	; 0x2642 <LCD_sendCommand>
}
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	e9 97       	sbiw	r28, 0x39	; 57
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
    2656:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    2658:	a2 e3       	ldi	r26, 0x32	; 50
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	e2 e3       	ldi	r30, 0x32	; 50
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	8f 7e       	andi	r24, 0xEF	; 239
    2664:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2666:	a2 e3       	ldi	r26, 0x32	; 50
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e2 e3       	ldi	r30, 0x32	; 50
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	8f 7d       	andi	r24, 0xDF	; 223
    2672:	8c 93       	st	X, r24
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	a0 e8       	ldi	r26, 0x80	; 128
    267a:	bf e3       	ldi	r27, 0x3F	; 63
    267c:	8d ab       	std	Y+53, r24	; 0x35
    267e:	9e ab       	std	Y+54, r25	; 0x36
    2680:	af ab       	std	Y+55, r26	; 0x37
    2682:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2684:	6d a9       	ldd	r22, Y+53	; 0x35
    2686:	7e a9       	ldd	r23, Y+54	; 0x36
    2688:	8f a9       	ldd	r24, Y+55	; 0x37
    268a:	98 ad       	ldd	r25, Y+56	; 0x38
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	4a ef       	ldi	r20, 0xFA	; 250
    2692:	54 e4       	ldi	r21, 0x44	; 68
    2694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	89 ab       	std	Y+49, r24	; 0x31
    269e:	9a ab       	std	Y+50, r25	; 0x32
    26a0:	ab ab       	std	Y+51, r26	; 0x33
    26a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26a4:	69 a9       	ldd	r22, Y+49	; 0x31
    26a6:	7a a9       	ldd	r23, Y+50	; 0x32
    26a8:	8b a9       	ldd	r24, Y+51	; 0x33
    26aa:	9c a9       	ldd	r25, Y+52	; 0x34
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e8       	ldi	r20, 0x80	; 128
    26b2:	5f e3       	ldi	r21, 0x3F	; 63
    26b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b8:	88 23       	and	r24, r24
    26ba:	2c f4       	brge	.+10     	; 0x26c6 <LCD_sendCommand+0x84>
		__ticks = 1;
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	98 ab       	std	Y+48, r25	; 0x30
    26c2:	8f a7       	std	Y+47, r24	; 0x2f
    26c4:	3f c0       	rjmp	.+126    	; 0x2744 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    26c6:	69 a9       	ldd	r22, Y+49	; 0x31
    26c8:	7a a9       	ldd	r23, Y+50	; 0x32
    26ca:	8b a9       	ldd	r24, Y+51	; 0x33
    26cc:	9c a9       	ldd	r25, Y+52	; 0x34
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	3f ef       	ldi	r19, 0xFF	; 255
    26d2:	4f e7       	ldi	r20, 0x7F	; 127
    26d4:	57 e4       	ldi	r21, 0x47	; 71
    26d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26da:	18 16       	cp	r1, r24
    26dc:	4c f5       	brge	.+82     	; 0x2730 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26de:	6d a9       	ldd	r22, Y+53	; 0x35
    26e0:	7e a9       	ldd	r23, Y+54	; 0x36
    26e2:	8f a9       	ldd	r24, Y+55	; 0x37
    26e4:	98 ad       	ldd	r25, Y+56	; 0x38
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e2       	ldi	r20, 0x20	; 32
    26ec:	51 e4       	ldi	r21, 0x41	; 65
    26ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	bc 01       	movw	r22, r24
    26f8:	cd 01       	movw	r24, r26
    26fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	98 ab       	std	Y+48, r25	; 0x30
    2704:	8f a7       	std	Y+47, r24	; 0x2f
    2706:	0f c0       	rjmp	.+30     	; 0x2726 <LCD_sendCommand+0xe4>
    2708:	88 ec       	ldi	r24, 0xC8	; 200
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	9e a7       	std	Y+46, r25	; 0x2e
    270e:	8d a7       	std	Y+45, r24	; 0x2d
    2710:	8d a5       	ldd	r24, Y+45	; 0x2d
    2712:	9e a5       	ldd	r25, Y+46	; 0x2e
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <LCD_sendCommand+0xd2>
    2718:	9e a7       	std	Y+46, r25	; 0x2e
    271a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271c:	8f a5       	ldd	r24, Y+47	; 0x2f
    271e:	98 a9       	ldd	r25, Y+48	; 0x30
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	98 ab       	std	Y+48, r25	; 0x30
    2724:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2726:	8f a5       	ldd	r24, Y+47	; 0x2f
    2728:	98 a9       	ldd	r25, Y+48	; 0x30
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	69 f7       	brne	.-38     	; 0x2708 <LCD_sendCommand+0xc6>
    272e:	14 c0       	rjmp	.+40     	; 0x2758 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2730:	69 a9       	ldd	r22, Y+49	; 0x31
    2732:	7a a9       	ldd	r23, Y+50	; 0x32
    2734:	8b a9       	ldd	r24, Y+51	; 0x33
    2736:	9c a9       	ldd	r25, Y+52	; 0x34
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	98 ab       	std	Y+48, r25	; 0x30
    2742:	8f a7       	std	Y+47, r24	; 0x2f
    2744:	8f a5       	ldd	r24, Y+47	; 0x2f
    2746:	98 a9       	ldd	r25, Y+48	; 0x30
    2748:	9c a7       	std	Y+44, r25	; 0x2c
    274a:	8b a7       	std	Y+43, r24	; 0x2b
    274c:	8b a5       	ldd	r24, Y+43	; 0x2b
    274e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <LCD_sendCommand+0x10e>
    2754:	9c a7       	std	Y+44, r25	; 0x2c
    2756:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2758:	a2 e3       	ldi	r26, 0x32	; 50
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	e2 e3       	ldi	r30, 0x32	; 50
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	80 64       	ori	r24, 0x40	; 64
    2764:	8c 93       	st	X, r24
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	a0 e8       	ldi	r26, 0x80	; 128
    276c:	bf e3       	ldi	r27, 0x3F	; 63
    276e:	8f a3       	std	Y+39, r24	; 0x27
    2770:	98 a7       	std	Y+40, r25	; 0x28
    2772:	a9 a7       	std	Y+41, r26	; 0x29
    2774:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2776:	6f a1       	ldd	r22, Y+39	; 0x27
    2778:	78 a5       	ldd	r23, Y+40	; 0x28
    277a:	89 a5       	ldd	r24, Y+41	; 0x29
    277c:	9a a5       	ldd	r25, Y+42	; 0x2a
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	4a ef       	ldi	r20, 0xFA	; 250
    2784:	54 e4       	ldi	r21, 0x44	; 68
    2786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	8b a3       	std	Y+35, r24	; 0x23
    2790:	9c a3       	std	Y+36, r25	; 0x24
    2792:	ad a3       	std	Y+37, r26	; 0x25
    2794:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2796:	6b a1       	ldd	r22, Y+35	; 0x23
    2798:	7c a1       	ldd	r23, Y+36	; 0x24
    279a:	8d a1       	ldd	r24, Y+37	; 0x25
    279c:	9e a1       	ldd	r25, Y+38	; 0x26
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e8       	ldi	r20, 0x80	; 128
    27a4:	5f e3       	ldi	r21, 0x3F	; 63
    27a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27aa:	88 23       	and	r24, r24
    27ac:	2c f4       	brge	.+10     	; 0x27b8 <LCD_sendCommand+0x176>
		__ticks = 1;
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	9a a3       	std	Y+34, r25	; 0x22
    27b4:	89 a3       	std	Y+33, r24	; 0x21
    27b6:	3f c0       	rjmp	.+126    	; 0x2836 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    27b8:	6b a1       	ldd	r22, Y+35	; 0x23
    27ba:	7c a1       	ldd	r23, Y+36	; 0x24
    27bc:	8d a1       	ldd	r24, Y+37	; 0x25
    27be:	9e a1       	ldd	r25, Y+38	; 0x26
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	3f ef       	ldi	r19, 0xFF	; 255
    27c4:	4f e7       	ldi	r20, 0x7F	; 127
    27c6:	57 e4       	ldi	r21, 0x47	; 71
    27c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27cc:	18 16       	cp	r1, r24
    27ce:	4c f5       	brge	.+82     	; 0x2822 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d0:	6f a1       	ldd	r22, Y+39	; 0x27
    27d2:	78 a5       	ldd	r23, Y+40	; 0x28
    27d4:	89 a5       	ldd	r24, Y+41	; 0x29
    27d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e2       	ldi	r20, 0x20	; 32
    27de:	51 e4       	ldi	r21, 0x41	; 65
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	bc 01       	movw	r22, r24
    27ea:	cd 01       	movw	r24, r26
    27ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	9a a3       	std	Y+34, r25	; 0x22
    27f6:	89 a3       	std	Y+33, r24	; 0x21
    27f8:	0f c0       	rjmp	.+30     	; 0x2818 <LCD_sendCommand+0x1d6>
    27fa:	88 ec       	ldi	r24, 0xC8	; 200
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	98 a3       	std	Y+32, r25	; 0x20
    2800:	8f 8f       	std	Y+31, r24	; 0x1f
    2802:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2804:	98 a1       	ldd	r25, Y+32	; 0x20
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <LCD_sendCommand+0x1c4>
    280a:	98 a3       	std	Y+32, r25	; 0x20
    280c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280e:	89 a1       	ldd	r24, Y+33	; 0x21
    2810:	9a a1       	ldd	r25, Y+34	; 0x22
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	9a a3       	std	Y+34, r25	; 0x22
    2816:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2818:	89 a1       	ldd	r24, Y+33	; 0x21
    281a:	9a a1       	ldd	r25, Y+34	; 0x22
    281c:	00 97       	sbiw	r24, 0x00	; 0
    281e:	69 f7       	brne	.-38     	; 0x27fa <LCD_sendCommand+0x1b8>
    2820:	14 c0       	rjmp	.+40     	; 0x284a <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2822:	6b a1       	ldd	r22, Y+35	; 0x23
    2824:	7c a1       	ldd	r23, Y+36	; 0x24
    2826:	8d a1       	ldd	r24, Y+37	; 0x25
    2828:	9e a1       	ldd	r25, Y+38	; 0x26
    282a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	9a a3       	std	Y+34, r25	; 0x22
    2834:	89 a3       	std	Y+33, r24	; 0x21
    2836:	89 a1       	ldd	r24, Y+33	; 0x21
    2838:	9a a1       	ldd	r25, Y+34	; 0x22
    283a:	9e 8f       	std	Y+30, r25	; 0x1e
    283c:	8d 8f       	std	Y+29, r24	; 0x1d
    283e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2840:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	f1 f7       	brne	.-4      	; 0x2842 <LCD_sendCommand+0x200>
    2846:	9e 8f       	std	Y+30, r25	; 0x1e
    2848:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    284a:	e5 e3       	ldi	r30, 0x35	; 53
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	89 ad       	ldd	r24, Y+57	; 0x39
    2850:	80 83       	st	Z, r24
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a0 e8       	ldi	r26, 0x80	; 128
    2858:	bf e3       	ldi	r27, 0x3F	; 63
    285a:	89 8f       	std	Y+25, r24	; 0x19
    285c:	9a 8f       	std	Y+26, r25	; 0x1a
    285e:	ab 8f       	std	Y+27, r26	; 0x1b
    2860:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2862:	69 8d       	ldd	r22, Y+25	; 0x19
    2864:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2866:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2868:	9c 8d       	ldd	r25, Y+28	; 0x1c
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4a ef       	ldi	r20, 0xFA	; 250
    2870:	54 e4       	ldi	r21, 0x44	; 68
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	8d 8b       	std	Y+21, r24	; 0x15
    287c:	9e 8b       	std	Y+22, r25	; 0x16
    287e:	af 8b       	std	Y+23, r26	; 0x17
    2880:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2882:	6d 89       	ldd	r22, Y+21	; 0x15
    2884:	7e 89       	ldd	r23, Y+22	; 0x16
    2886:	8f 89       	ldd	r24, Y+23	; 0x17
    2888:	98 8d       	ldd	r25, Y+24	; 0x18
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e8       	ldi	r20, 0x80	; 128
    2890:	5f e3       	ldi	r21, 0x3F	; 63
    2892:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2896:	88 23       	and	r24, r24
    2898:	2c f4       	brge	.+10     	; 0x28a4 <LCD_sendCommand+0x262>
		__ticks = 1;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9c 8b       	std	Y+20, r25	; 0x14
    28a0:	8b 8b       	std	Y+19, r24	; 0x13
    28a2:	3f c0       	rjmp	.+126    	; 0x2922 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    28a4:	6d 89       	ldd	r22, Y+21	; 0x15
    28a6:	7e 89       	ldd	r23, Y+22	; 0x16
    28a8:	8f 89       	ldd	r24, Y+23	; 0x17
    28aa:	98 8d       	ldd	r25, Y+24	; 0x18
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	3f ef       	ldi	r19, 0xFF	; 255
    28b0:	4f e7       	ldi	r20, 0x7F	; 127
    28b2:	57 e4       	ldi	r21, 0x47	; 71
    28b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b8:	18 16       	cp	r1, r24
    28ba:	4c f5       	brge	.+82     	; 0x290e <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28bc:	69 8d       	ldd	r22, Y+25	; 0x19
    28be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e2       	ldi	r20, 0x20	; 32
    28ca:	51 e4       	ldi	r21, 0x41	; 65
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9c 8b       	std	Y+20, r25	; 0x14
    28e2:	8b 8b       	std	Y+19, r24	; 0x13
    28e4:	0f c0       	rjmp	.+30     	; 0x2904 <LCD_sendCommand+0x2c2>
    28e6:	88 ec       	ldi	r24, 0xC8	; 200
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	9a 8b       	std	Y+18, r25	; 0x12
    28ec:	89 8b       	std	Y+17, r24	; 0x11
    28ee:	89 89       	ldd	r24, Y+17	; 0x11
    28f0:	9a 89       	ldd	r25, Y+18	; 0x12
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <LCD_sendCommand+0x2b0>
    28f6:	9a 8b       	std	Y+18, r25	; 0x12
    28f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fa:	8b 89       	ldd	r24, Y+19	; 0x13
    28fc:	9c 89       	ldd	r25, Y+20	; 0x14
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	9c 8b       	std	Y+20, r25	; 0x14
    2902:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2904:	8b 89       	ldd	r24, Y+19	; 0x13
    2906:	9c 89       	ldd	r25, Y+20	; 0x14
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	69 f7       	brne	.-38     	; 0x28e6 <LCD_sendCommand+0x2a4>
    290c:	14 c0       	rjmp	.+40     	; 0x2936 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290e:	6d 89       	ldd	r22, Y+21	; 0x15
    2910:	7e 89       	ldd	r23, Y+22	; 0x16
    2912:	8f 89       	ldd	r24, Y+23	; 0x17
    2914:	98 8d       	ldd	r25, Y+24	; 0x18
    2916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9c 8b       	std	Y+20, r25	; 0x14
    2920:	8b 8b       	std	Y+19, r24	; 0x13
    2922:	8b 89       	ldd	r24, Y+19	; 0x13
    2924:	9c 89       	ldd	r25, Y+20	; 0x14
    2926:	98 8b       	std	Y+16, r25	; 0x10
    2928:	8f 87       	std	Y+15, r24	; 0x0f
    292a:	8f 85       	ldd	r24, Y+15	; 0x0f
    292c:	98 89       	ldd	r25, Y+16	; 0x10
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <LCD_sendCommand+0x2ec>
    2932:	98 8b       	std	Y+16, r25	; 0x10
    2934:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2936:	a2 e3       	ldi	r26, 0x32	; 50
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e2 e3       	ldi	r30, 0x32	; 50
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	8f 7b       	andi	r24, 0xBF	; 191
    2942:	8c 93       	st	X, r24
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	a0 e8       	ldi	r26, 0x80	; 128
    294a:	bf e3       	ldi	r27, 0x3F	; 63
    294c:	8b 87       	std	Y+11, r24	; 0x0b
    294e:	9c 87       	std	Y+12, r25	; 0x0c
    2950:	ad 87       	std	Y+13, r26	; 0x0d
    2952:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2954:	6b 85       	ldd	r22, Y+11	; 0x0b
    2956:	7c 85       	ldd	r23, Y+12	; 0x0c
    2958:	8d 85       	ldd	r24, Y+13	; 0x0d
    295a:	9e 85       	ldd	r25, Y+14	; 0x0e
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	4a ef       	ldi	r20, 0xFA	; 250
    2962:	54 e4       	ldi	r21, 0x44	; 68
    2964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	8f 83       	std	Y+7, r24	; 0x07
    296e:	98 87       	std	Y+8, r25	; 0x08
    2970:	a9 87       	std	Y+9, r26	; 0x09
    2972:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2974:	6f 81       	ldd	r22, Y+7	; 0x07
    2976:	78 85       	ldd	r23, Y+8	; 0x08
    2978:	89 85       	ldd	r24, Y+9	; 0x09
    297a:	9a 85       	ldd	r25, Y+10	; 0x0a
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e8       	ldi	r20, 0x80	; 128
    2982:	5f e3       	ldi	r21, 0x3F	; 63
    2984:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2988:	88 23       	and	r24, r24
    298a:	2c f4       	brge	.+10     	; 0x2996 <LCD_sendCommand+0x354>
		__ticks = 1;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9e 83       	std	Y+6, r25	; 0x06
    2992:	8d 83       	std	Y+5, r24	; 0x05
    2994:	3f c0       	rjmp	.+126    	; 0x2a14 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2996:	6f 81       	ldd	r22, Y+7	; 0x07
    2998:	78 85       	ldd	r23, Y+8	; 0x08
    299a:	89 85       	ldd	r24, Y+9	; 0x09
    299c:	9a 85       	ldd	r25, Y+10	; 0x0a
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	3f ef       	ldi	r19, 0xFF	; 255
    29a2:	4f e7       	ldi	r20, 0x7F	; 127
    29a4:	57 e4       	ldi	r21, 0x47	; 71
    29a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29aa:	18 16       	cp	r1, r24
    29ac:	4c f5       	brge	.+82     	; 0x2a00 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e2       	ldi	r20, 0x20	; 32
    29bc:	51 e4       	ldi	r21, 0x41	; 65
    29be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	bc 01       	movw	r22, r24
    29c8:	cd 01       	movw	r24, r26
    29ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	9e 83       	std	Y+6, r25	; 0x06
    29d4:	8d 83       	std	Y+5, r24	; 0x05
    29d6:	0f c0       	rjmp	.+30     	; 0x29f6 <LCD_sendCommand+0x3b4>
    29d8:	88 ec       	ldi	r24, 0xC8	; 200
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9c 83       	std	Y+4, r25	; 0x04
    29de:	8b 83       	std	Y+3, r24	; 0x03
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	9c 81       	ldd	r25, Y+4	; 0x04
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <LCD_sendCommand+0x3a2>
    29e8:	9c 83       	std	Y+4, r25	; 0x04
    29ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	9e 81       	ldd	r25, Y+6	; 0x06
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f6:	8d 81       	ldd	r24, Y+5	; 0x05
    29f8:	9e 81       	ldd	r25, Y+6	; 0x06
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	69 f7       	brne	.-38     	; 0x29d8 <LCD_sendCommand+0x396>
    29fe:	14 c0       	rjmp	.+40     	; 0x2a28 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a00:	6f 81       	ldd	r22, Y+7	; 0x07
    2a02:	78 85       	ldd	r23, Y+8	; 0x08
    2a04:	89 85       	ldd	r24, Y+9	; 0x09
    2a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	9e 83       	std	Y+6, r25	; 0x06
    2a12:	8d 83       	std	Y+5, r24	; 0x05
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <LCD_sendCommand+0x3de>
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2a28:	e9 96       	adiw	r28, 0x39	; 57
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	08 95       	ret

00002a3a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	e9 97       	sbiw	r28, 0x39	; 57
    2a44:	0f b6       	in	r0, 0x3f	; 63
    2a46:	f8 94       	cli
    2a48:	de bf       	out	0x3e, r29	; 62
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	cd bf       	out	0x3d, r28	; 61
    2a4e:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2a50:	a2 e3       	ldi	r26, 0x32	; 50
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	e2 e3       	ldi	r30, 0x32	; 50
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	80 61       	ori	r24, 0x10	; 16
    2a5c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2a5e:	a2 e3       	ldi	r26, 0x32	; 50
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	e2 e3       	ldi	r30, 0x32	; 50
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	8f 7d       	andi	r24, 0xDF	; 223
    2a6a:	8c 93       	st	X, r24
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	a0 e8       	ldi	r26, 0x80	; 128
    2a72:	bf e3       	ldi	r27, 0x3F	; 63
    2a74:	8d ab       	std	Y+53, r24	; 0x35
    2a76:	9e ab       	std	Y+54, r25	; 0x36
    2a78:	af ab       	std	Y+55, r26	; 0x37
    2a7a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a7e:	7e a9       	ldd	r23, Y+54	; 0x36
    2a80:	8f a9       	ldd	r24, Y+55	; 0x37
    2a82:	98 ad       	ldd	r25, Y+56	; 0x38
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	4a ef       	ldi	r20, 0xFA	; 250
    2a8a:	54 e4       	ldi	r21, 0x44	; 68
    2a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	89 ab       	std	Y+49, r24	; 0x31
    2a96:	9a ab       	std	Y+50, r25	; 0x32
    2a98:	ab ab       	std	Y+51, r26	; 0x33
    2a9a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa0:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa2:	9c a9       	ldd	r25, Y+52	; 0x34
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e8       	ldi	r20, 0x80	; 128
    2aaa:	5f e3       	ldi	r21, 0x3F	; 63
    2aac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab0:	88 23       	and	r24, r24
    2ab2:	2c f4       	brge	.+10     	; 0x2abe <LCD_displayCharacter+0x84>
		__ticks = 1;
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	98 ab       	std	Y+48, r25	; 0x30
    2aba:	8f a7       	std	Y+47, r24	; 0x2f
    2abc:	3f c0       	rjmp	.+126    	; 0x2b3c <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    2abe:	69 a9       	ldd	r22, Y+49	; 0x31
    2ac0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ac2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ac4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	3f ef       	ldi	r19, 0xFF	; 255
    2aca:	4f e7       	ldi	r20, 0x7F	; 127
    2acc:	57 e4       	ldi	r21, 0x47	; 71
    2ace:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad2:	18 16       	cp	r1, r24
    2ad4:	4c f5       	brge	.+82     	; 0x2b28 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad6:	6d a9       	ldd	r22, Y+53	; 0x35
    2ad8:	7e a9       	ldd	r23, Y+54	; 0x36
    2ada:	8f a9       	ldd	r24, Y+55	; 0x37
    2adc:	98 ad       	ldd	r25, Y+56	; 0x38
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e2       	ldi	r20, 0x20	; 32
    2ae4:	51 e4       	ldi	r21, 0x41	; 65
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	98 ab       	std	Y+48, r25	; 0x30
    2afc:	8f a7       	std	Y+47, r24	; 0x2f
    2afe:	0f c0       	rjmp	.+30     	; 0x2b1e <LCD_displayCharacter+0xe4>
    2b00:	88 ec       	ldi	r24, 0xC8	; 200
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	9e a7       	std	Y+46, r25	; 0x2e
    2b06:	8d a7       	std	Y+45, r24	; 0x2d
    2b08:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b0a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <LCD_displayCharacter+0xd2>
    2b10:	9e a7       	std	Y+46, r25	; 0x2e
    2b12:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b14:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b16:	98 a9       	ldd	r25, Y+48	; 0x30
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	98 ab       	std	Y+48, r25	; 0x30
    2b1c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b20:	98 a9       	ldd	r25, Y+48	; 0x30
    2b22:	00 97       	sbiw	r24, 0x00	; 0
    2b24:	69 f7       	brne	.-38     	; 0x2b00 <LCD_displayCharacter+0xc6>
    2b26:	14 c0       	rjmp	.+40     	; 0x2b50 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b28:	69 a9       	ldd	r22, Y+49	; 0x31
    2b2a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b2c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b2e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	98 ab       	std	Y+48, r25	; 0x30
    2b3a:	8f a7       	std	Y+47, r24	; 0x2f
    2b3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b3e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b40:	9c a7       	std	Y+44, r25	; 0x2c
    2b42:	8b a7       	std	Y+43, r24	; 0x2b
    2b44:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b46:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <LCD_displayCharacter+0x10e>
    2b4c:	9c a7       	std	Y+44, r25	; 0x2c
    2b4e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2b50:	a2 e3       	ldi	r26, 0x32	; 50
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	e2 e3       	ldi	r30, 0x32	; 50
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	80 64       	ori	r24, 0x40	; 64
    2b5c:	8c 93       	st	X, r24
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	a0 e8       	ldi	r26, 0x80	; 128
    2b64:	bf e3       	ldi	r27, 0x3F	; 63
    2b66:	8f a3       	std	Y+39, r24	; 0x27
    2b68:	98 a7       	std	Y+40, r25	; 0x28
    2b6a:	a9 a7       	std	Y+41, r26	; 0x29
    2b6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6e:	6f a1       	ldd	r22, Y+39	; 0x27
    2b70:	78 a5       	ldd	r23, Y+40	; 0x28
    2b72:	89 a5       	ldd	r24, Y+41	; 0x29
    2b74:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	4a ef       	ldi	r20, 0xFA	; 250
    2b7c:	54 e4       	ldi	r21, 0x44	; 68
    2b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	8b a3       	std	Y+35, r24	; 0x23
    2b88:	9c a3       	std	Y+36, r25	; 0x24
    2b8a:	ad a3       	std	Y+37, r26	; 0x25
    2b8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b90:	7c a1       	ldd	r23, Y+36	; 0x24
    2b92:	8d a1       	ldd	r24, Y+37	; 0x25
    2b94:	9e a1       	ldd	r25, Y+38	; 0x26
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e8       	ldi	r20, 0x80	; 128
    2b9c:	5f e3       	ldi	r21, 0x3F	; 63
    2b9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ba2:	88 23       	and	r24, r24
    2ba4:	2c f4       	brge	.+10     	; 0x2bb0 <LCD_displayCharacter+0x176>
		__ticks = 1;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	9a a3       	std	Y+34, r25	; 0x22
    2bac:	89 a3       	std	Y+33, r24	; 0x21
    2bae:	3f c0       	rjmp	.+126    	; 0x2c2e <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2bb0:	6b a1       	ldd	r22, Y+35	; 0x23
    2bb2:	7c a1       	ldd	r23, Y+36	; 0x24
    2bb4:	8d a1       	ldd	r24, Y+37	; 0x25
    2bb6:	9e a1       	ldd	r25, Y+38	; 0x26
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	3f ef       	ldi	r19, 0xFF	; 255
    2bbc:	4f e7       	ldi	r20, 0x7F	; 127
    2bbe:	57 e4       	ldi	r21, 0x47	; 71
    2bc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bc4:	18 16       	cp	r1, r24
    2bc6:	4c f5       	brge	.+82     	; 0x2c1a <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc8:	6f a1       	ldd	r22, Y+39	; 0x27
    2bca:	78 a5       	ldd	r23, Y+40	; 0x28
    2bcc:	89 a5       	ldd	r24, Y+41	; 0x29
    2bce:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e2       	ldi	r20, 0x20	; 32
    2bd6:	51 e4       	ldi	r21, 0x41	; 65
    2bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	bc 01       	movw	r22, r24
    2be2:	cd 01       	movw	r24, r26
    2be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	9a a3       	std	Y+34, r25	; 0x22
    2bee:	89 a3       	std	Y+33, r24	; 0x21
    2bf0:	0f c0       	rjmp	.+30     	; 0x2c10 <LCD_displayCharacter+0x1d6>
    2bf2:	88 ec       	ldi	r24, 0xC8	; 200
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	98 a3       	std	Y+32, r25	; 0x20
    2bf8:	8f 8f       	std	Y+31, r24	; 0x1f
    2bfa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bfc:	98 a1       	ldd	r25, Y+32	; 0x20
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	f1 f7       	brne	.-4      	; 0x2bfe <LCD_displayCharacter+0x1c4>
    2c02:	98 a3       	std	Y+32, r25	; 0x20
    2c04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c06:	89 a1       	ldd	r24, Y+33	; 0x21
    2c08:	9a a1       	ldd	r25, Y+34	; 0x22
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	9a a3       	std	Y+34, r25	; 0x22
    2c0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c10:	89 a1       	ldd	r24, Y+33	; 0x21
    2c12:	9a a1       	ldd	r25, Y+34	; 0x22
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	69 f7       	brne	.-38     	; 0x2bf2 <LCD_displayCharacter+0x1b8>
    2c18:	14 c0       	rjmp	.+40     	; 0x2c42 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c1a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c1c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c20:	9e a1       	ldd	r25, Y+38	; 0x26
    2c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	9a a3       	std	Y+34, r25	; 0x22
    2c2c:	89 a3       	std	Y+33, r24	; 0x21
    2c2e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c30:	9a a1       	ldd	r25, Y+34	; 0x22
    2c32:	9e 8f       	std	Y+30, r25	; 0x1e
    2c34:	8d 8f       	std	Y+29, r24	; 0x1d
    2c36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	f1 f7       	brne	.-4      	; 0x2c3a <LCD_displayCharacter+0x200>
    2c3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c40:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    2c42:	e5 e3       	ldi	r30, 0x35	; 53
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	89 ad       	ldd	r24, Y+57	; 0x39
    2c48:	80 83       	st	Z, r24
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	a0 e8       	ldi	r26, 0x80	; 128
    2c50:	bf e3       	ldi	r27, 0x3F	; 63
    2c52:	89 8f       	std	Y+25, r24	; 0x19
    2c54:	9a 8f       	std	Y+26, r25	; 0x1a
    2c56:	ab 8f       	std	Y+27, r26	; 0x1b
    2c58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	4a ef       	ldi	r20, 0xFA	; 250
    2c68:	54 e4       	ldi	r21, 0x44	; 68
    2c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	8d 8b       	std	Y+21, r24	; 0x15
    2c74:	9e 8b       	std	Y+22, r25	; 0x16
    2c76:	af 8b       	std	Y+23, r26	; 0x17
    2c78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c80:	98 8d       	ldd	r25, Y+24	; 0x18
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e8       	ldi	r20, 0x80	; 128
    2c88:	5f e3       	ldi	r21, 0x3F	; 63
    2c8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c8e:	88 23       	and	r24, r24
    2c90:	2c f4       	brge	.+10     	; 0x2c9c <LCD_displayCharacter+0x262>
		__ticks = 1;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	9c 8b       	std	Y+20, r25	; 0x14
    2c98:	8b 8b       	std	Y+19, r24	; 0x13
    2c9a:	3f c0       	rjmp	.+126    	; 0x2d1a <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2c9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2ca0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ca2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	3f ef       	ldi	r19, 0xFF	; 255
    2ca8:	4f e7       	ldi	r20, 0x7F	; 127
    2caa:	57 e4       	ldi	r21, 0x47	; 71
    2cac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cb0:	18 16       	cp	r1, r24
    2cb2:	4c f5       	brge	.+82     	; 0x2d06 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb4:	69 8d       	ldd	r22, Y+25	; 0x19
    2cb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e2       	ldi	r20, 0x20	; 32
    2cc2:	51 e4       	ldi	r21, 0x41	; 65
    2cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	bc 01       	movw	r22, r24
    2cce:	cd 01       	movw	r24, r26
    2cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	9c 8b       	std	Y+20, r25	; 0x14
    2cda:	8b 8b       	std	Y+19, r24	; 0x13
    2cdc:	0f c0       	rjmp	.+30     	; 0x2cfc <LCD_displayCharacter+0x2c2>
    2cde:	88 ec       	ldi	r24, 0xC8	; 200
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	9a 8b       	std	Y+18, r25	; 0x12
    2ce4:	89 8b       	std	Y+17, r24	; 0x11
    2ce6:	89 89       	ldd	r24, Y+17	; 0x11
    2ce8:	9a 89       	ldd	r25, Y+18	; 0x12
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	f1 f7       	brne	.-4      	; 0x2cea <LCD_displayCharacter+0x2b0>
    2cee:	9a 8b       	std	Y+18, r25	; 0x12
    2cf0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	9c 8b       	std	Y+20, r25	; 0x14
    2cfa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	69 f7       	brne	.-38     	; 0x2cde <LCD_displayCharacter+0x2a4>
    2d04:	14 c0       	rjmp	.+40     	; 0x2d2e <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d06:	6d 89       	ldd	r22, Y+21	; 0x15
    2d08:	7e 89       	ldd	r23, Y+22	; 0x16
    2d0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	9c 8b       	std	Y+20, r25	; 0x14
    2d18:	8b 8b       	std	Y+19, r24	; 0x13
    2d1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d1e:	98 8b       	std	Y+16, r25	; 0x10
    2d20:	8f 87       	std	Y+15, r24	; 0x0f
    2d22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d24:	98 89       	ldd	r25, Y+16	; 0x10
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <LCD_displayCharacter+0x2ec>
    2d2a:	98 8b       	std	Y+16, r25	; 0x10
    2d2c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2d2e:	a2 e3       	ldi	r26, 0x32	; 50
    2d30:	b0 e0       	ldi	r27, 0x00	; 0
    2d32:	e2 e3       	ldi	r30, 0x32	; 50
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	8f 7b       	andi	r24, 0xBF	; 191
    2d3a:	8c 93       	st	X, r24
    2d3c:	80 e0       	ldi	r24, 0x00	; 0
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	a0 e8       	ldi	r26, 0x80	; 128
    2d42:	bf e3       	ldi	r27, 0x3F	; 63
    2d44:	8b 87       	std	Y+11, r24	; 0x0b
    2d46:	9c 87       	std	Y+12, r25	; 0x0c
    2d48:	ad 87       	std	Y+13, r26	; 0x0d
    2d4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	4a ef       	ldi	r20, 0xFA	; 250
    2d5a:	54 e4       	ldi	r21, 0x44	; 68
    2d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	8f 83       	std	Y+7, r24	; 0x07
    2d66:	98 87       	std	Y+8, r25	; 0x08
    2d68:	a9 87       	std	Y+9, r26	; 0x09
    2d6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d6e:	78 85       	ldd	r23, Y+8	; 0x08
    2d70:	89 85       	ldd	r24, Y+9	; 0x09
    2d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	40 e8       	ldi	r20, 0x80	; 128
    2d7a:	5f e3       	ldi	r21, 0x3F	; 63
    2d7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d80:	88 23       	and	r24, r24
    2d82:	2c f4       	brge	.+10     	; 0x2d8e <LCD_displayCharacter+0x354>
		__ticks = 1;
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	9e 83       	std	Y+6, r25	; 0x06
    2d8a:	8d 83       	std	Y+5, r24	; 0x05
    2d8c:	3f c0       	rjmp	.+126    	; 0x2e0c <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d90:	78 85       	ldd	r23, Y+8	; 0x08
    2d92:	89 85       	ldd	r24, Y+9	; 0x09
    2d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	3f ef       	ldi	r19, 0xFF	; 255
    2d9a:	4f e7       	ldi	r20, 0x7F	; 127
    2d9c:	57 e4       	ldi	r21, 0x47	; 71
    2d9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2da2:	18 16       	cp	r1, r24
    2da4:	4c f5       	brge	.+82     	; 0x2df8 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2daa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	40 e2       	ldi	r20, 0x20	; 32
    2db4:	51 e4       	ldi	r21, 0x41	; 65
    2db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	bc 01       	movw	r22, r24
    2dc0:	cd 01       	movw	r24, r26
    2dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	9e 83       	std	Y+6, r25	; 0x06
    2dcc:	8d 83       	std	Y+5, r24	; 0x05
    2dce:	0f c0       	rjmp	.+30     	; 0x2dee <LCD_displayCharacter+0x3b4>
    2dd0:	88 ec       	ldi	r24, 0xC8	; 200
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	9c 83       	std	Y+4, r25	; 0x04
    2dd6:	8b 83       	std	Y+3, r24	; 0x03
    2dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dda:	9c 81       	ldd	r25, Y+4	; 0x04
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	f1 f7       	brne	.-4      	; 0x2ddc <LCD_displayCharacter+0x3a2>
    2de0:	9c 83       	std	Y+4, r25	; 0x04
    2de2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de4:	8d 81       	ldd	r24, Y+5	; 0x05
    2de6:	9e 81       	ldd	r25, Y+6	; 0x06
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	9e 83       	std	Y+6, r25	; 0x06
    2dec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dee:	8d 81       	ldd	r24, Y+5	; 0x05
    2df0:	9e 81       	ldd	r25, Y+6	; 0x06
    2df2:	00 97       	sbiw	r24, 0x00	; 0
    2df4:	69 f7       	brne	.-38     	; 0x2dd0 <LCD_displayCharacter+0x396>
    2df6:	14 c0       	rjmp	.+40     	; 0x2e20 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dfa:	78 85       	ldd	r23, Y+8	; 0x08
    2dfc:	89 85       	ldd	r24, Y+9	; 0x09
    2dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	9e 83       	std	Y+6, r25	; 0x06
    2e0a:	8d 83       	std	Y+5, r24	; 0x05
    2e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e10:	9a 83       	std	Y+2, r25	; 0x02
    2e12:	89 83       	std	Y+1, r24	; 0x01
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
    2e16:	9a 81       	ldd	r25, Y+2	; 0x02
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	f1 f7       	brne	.-4      	; 0x2e18 <LCD_displayCharacter+0x3de>
    2e1c:	9a 83       	std	Y+2, r25	; 0x02
    2e1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    2e20:	e9 96       	adiw	r28, 0x39	; 57
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	f8 94       	cli
    2e26:	de bf       	out	0x3e, r29	; 62
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	cf 91       	pop	r28
    2e2e:	df 91       	pop	r29
    2e30:	08 95       	ret

00002e32 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	00 d0       	rcall	.+0      	; 0x2e38 <LCD_displayString+0x6>
    2e38:	0f 92       	push	r0
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
    2e3e:	9b 83       	std	Y+3, r25	; 0x03
    2e40:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e42:	19 82       	std	Y+1, r1	; 0x01
    2e44:	0e c0       	rjmp	.+28     	; 0x2e62 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2e46:	89 81       	ldd	r24, Y+1	; 0x01
    2e48:	28 2f       	mov	r18, r24
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e50:	fc 01       	movw	r30, r24
    2e52:	e2 0f       	add	r30, r18
    2e54:	f3 1f       	adc	r31, r19
    2e56:	80 81       	ld	r24, Z
    2e58:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <LCD_displayCharacter>
		i++;
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	8f 5f       	subi	r24, 0xFF	; 255
    2e60:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	28 2f       	mov	r18, r24
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	e2 0f       	add	r30, r18
    2e70:	f3 1f       	adc	r31, r19
    2e72:	80 81       	ld	r24, Z
    2e74:	88 23       	and	r24, r24
    2e76:	39 f7       	brne	.-50     	; 0x2e46 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2e78:	0f 90       	pop	r0
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	08 95       	ret

00002e84 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	00 d0       	rcall	.+0      	; 0x2e8a <LCD_goToRowColumn+0x6>
    2e8a:	00 d0       	rcall	.+0      	; 0x2e8c <LCD_goToRowColumn+0x8>
    2e8c:	0f 92       	push	r0
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	8a 83       	std	Y+2, r24	; 0x02
    2e94:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2e96:	8a 81       	ldd	r24, Y+2	; 0x02
    2e98:	28 2f       	mov	r18, r24
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	3d 83       	std	Y+5, r19	; 0x05
    2e9e:	2c 83       	std	Y+4, r18	; 0x04
    2ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea4:	81 30       	cpi	r24, 0x01	; 1
    2ea6:	91 05       	cpc	r25, r1
    2ea8:	c1 f0       	breq	.+48     	; 0x2eda <LCD_goToRowColumn+0x56>
    2eaa:	2c 81       	ldd	r18, Y+4	; 0x04
    2eac:	3d 81       	ldd	r19, Y+5	; 0x05
    2eae:	22 30       	cpi	r18, 0x02	; 2
    2eb0:	31 05       	cpc	r19, r1
    2eb2:	2c f4       	brge	.+10     	; 0x2ebe <LCD_goToRowColumn+0x3a>
    2eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb6:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	61 f0       	breq	.+24     	; 0x2ed4 <LCD_goToRowColumn+0x50>
    2ebc:	19 c0       	rjmp	.+50     	; 0x2ef0 <LCD_goToRowColumn+0x6c>
    2ebe:	2c 81       	ldd	r18, Y+4	; 0x04
    2ec0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ec2:	22 30       	cpi	r18, 0x02	; 2
    2ec4:	31 05       	cpc	r19, r1
    2ec6:	69 f0       	breq	.+26     	; 0x2ee2 <LCD_goToRowColumn+0x5e>
    2ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eca:	9d 81       	ldd	r25, Y+5	; 0x05
    2ecc:	83 30       	cpi	r24, 0x03	; 3
    2ece:	91 05       	cpc	r25, r1
    2ed0:	61 f0       	breq	.+24     	; 0x2eea <LCD_goToRowColumn+0x66>
    2ed2:	0e c0       	rjmp	.+28     	; 0x2ef0 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed6:	89 83       	std	Y+1, r24	; 0x01
    2ed8:	0b c0       	rjmp	.+22     	; 0x2ef0 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2eda:	8b 81       	ldd	r24, Y+3	; 0x03
    2edc:	80 5c       	subi	r24, 0xC0	; 192
    2ede:	89 83       	std	Y+1, r24	; 0x01
    2ee0:	07 c0       	rjmp	.+14     	; 0x2ef0 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee4:	80 5f       	subi	r24, 0xF0	; 240
    2ee6:	89 83       	std	Y+1, r24	; 0x01
    2ee8:	03 c0       	rjmp	.+6      	; 0x2ef0 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2eea:	8b 81       	ldd	r24, Y+3	; 0x03
    2eec:	80 5b       	subi	r24, 0xB0	; 176
    2eee:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	80 68       	ori	r24, 0x80	; 128
    2ef4:	0e 94 21 13 	call	0x2642	; 0x2642 <LCD_sendCommand>
}
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	cf 91       	pop	r28
    2f04:	df 91       	pop	r29
    2f06:	08 95       	ret

00002f08 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2f08:	df 93       	push	r29
    2f0a:	cf 93       	push	r28
    2f0c:	00 d0       	rcall	.+0      	; 0x2f0e <LCD_displayStringRowColumn+0x6>
    2f0e:	00 d0       	rcall	.+0      	; 0x2f10 <LCD_displayStringRowColumn+0x8>
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	89 83       	std	Y+1, r24	; 0x01
    2f16:	6a 83       	std	Y+2, r22	; 0x02
    2f18:	5c 83       	std	Y+4, r21	; 0x04
    2f1a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	6a 81       	ldd	r22, Y+2	; 0x02
    2f20:	0e 94 42 17 	call	0x2e84	; 0x2e84 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	9c 81       	ldd	r25, Y+4	; 0x04
    2f28:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
}
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	08 95       	ret

00002f3a <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	62 97       	sbiw	r28, 0x12	; 18
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	de bf       	out	0x3e, r29	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	cd bf       	out	0x3d, r28	; 61
    2f4e:	9a 8b       	std	Y+18, r25	; 0x12
    2f50:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2f52:	89 89       	ldd	r24, Y+17	; 0x11
    2f54:	9a 89       	ldd	r25, Y+18	; 0x12
    2f56:	9e 01       	movw	r18, r28
    2f58:	2f 5f       	subi	r18, 0xFF	; 255
    2f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5c:	b9 01       	movw	r22, r18
    2f5e:	4a e0       	ldi	r20, 0x0A	; 10
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	0e 94 f5 18 	call	0x31ea	; 0x31ea <itoa>
   LCD_displayString(buff);
    2f66:	ce 01       	movw	r24, r28
    2f68:	01 96       	adiw	r24, 0x01	; 1
    2f6a:	0e 94 19 17 	call	0x2e32	; 0x2e32 <LCD_displayString>
}
    2f6e:	62 96       	adiw	r28, 0x12	; 18
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	08 95       	ret

00002f80 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	0e 94 21 13 	call	0x2642	; 0x2642 <LCD_sendCommand>
}
    2f8e:	cf 91       	pop	r28
    2f90:	df 91       	pop	r29
    2f92:	08 95       	ret

00002f94 <TIMER1_CTC_MODE>:

#include "timer.h"


void TIMER1_CTC_MODE (void)
{
    2f94:	df 93       	push	r29
    2f96:	cf 93       	push	r28
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
	cli();
    2f9c:	f8 94       	cli
	TCNT1 = 0;
    2f9e:	ec e4       	ldi	r30, 0x4C	; 76
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	11 82       	std	Z+1, r1	; 0x01
    2fa4:	10 82       	st	Z, r1
	OCR1A = 960;
    2fa6:	ea e4       	ldi	r30, 0x4A	; 74
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 ec       	ldi	r24, 0xC0	; 192
    2fac:	93 e0       	ldi	r25, 0x03	; 3
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	80 83       	st	Z, r24

	TCCR1A |= (1<<FOC1A) | (1<<FOC1B);
    2fb2:	af e4       	ldi	r26, 0x4F	; 79
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	ef e4       	ldi	r30, 0x4F	; 79
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	8c 60       	ori	r24, 0x0C	; 12
    2fbe:	8c 93       	st	X, r24
	TCCR1B |= (1<<CS12) | (1<<CS10) | (1<<WGM12);
    2fc0:	ae e4       	ldi	r26, 0x4E	; 78
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	ee e4       	ldi	r30, 0x4E	; 78
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	8d 60       	ori	r24, 0x0D	; 13
    2fcc:	8c 93       	st	X, r24

	TIMSK |= (1<<OCIE1A);
    2fce:	a9 e5       	ldi	r26, 0x59	; 89
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	e9 e5       	ldi	r30, 0x59	; 89
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	80 81       	ld	r24, Z
    2fd8:	80 61       	ori	r24, 0x10	; 16
    2fda:	8c 93       	st	X, r24
	sei();
    2fdc:	78 94       	sei
}
    2fde:	cf 91       	pop	r28
    2fe0:	df 91       	pop	r29
    2fe2:	08 95       	ret

00002fe4 <Stop_Timer1>:

void Stop_Timer1 (void)
{
    2fe4:	df 93       	push	r29
    2fe6:	cf 93       	push	r28
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &=~ (1<<CS10) ;
    2fec:	ae e4       	ldi	r26, 0x4E	; 78
    2fee:	b0 e0       	ldi	r27, 0x00	; 0
    2ff0:	ee e4       	ldi	r30, 0x4E	; 78
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	80 81       	ld	r24, Z
    2ff6:	8e 7f       	andi	r24, 0xFE	; 254
    2ff8:	8c 93       	st	X, r24
	TCCR1B &=~ (1<<CS11) ;
    2ffa:	ae e4       	ldi	r26, 0x4E	; 78
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	ee e4       	ldi	r30, 0x4E	; 78
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 81       	ld	r24, Z
    3004:	8d 7f       	andi	r24, 0xFD	; 253
    3006:	8c 93       	st	X, r24
	TCCR1B &=~ (1<<CS12) ;
    3008:	ae e4       	ldi	r26, 0x4E	; 78
    300a:	b0 e0       	ldi	r27, 0x00	; 0
    300c:	ee e4       	ldi	r30, 0x4E	; 78
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	80 81       	ld	r24, Z
    3012:	8b 7f       	andi	r24, 0xFB	; 251
    3014:	8c 93       	st	X, r24
	TCNT1 = 0;
    3016:	ec e4       	ldi	r30, 0x4C	; 76
    3018:	f0 e0       	ldi	r31, 0x00	; 0
    301a:	11 82       	std	Z+1, r1	; 0x01
    301c:	10 82       	st	Z, r1

}
    301e:	cf 91       	pop	r28
    3020:	df 91       	pop	r29
    3022:	08 95       	ret

00003024 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    3024:	df 93       	push	r29
    3026:	cf 93       	push	r28
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    302c:	eb e2       	ldi	r30, 0x2B	; 43
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	82 e0       	ldi	r24, 0x02	; 2
    3032:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3034:	ea e2       	ldi	r30, 0x2A	; 42
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	88 e1       	ldi	r24, 0x18	; 24
    303a:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    303c:	e0 e4       	ldi	r30, 0x40	; 64
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	86 e8       	ldi	r24, 0x86	; 134
    3042:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    3044:	e0 e4       	ldi	r30, 0x40	; 64
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    304a:	e9 e2       	ldi	r30, 0x29	; 41
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	87 e6       	ldi	r24, 0x67	; 103
    3050:	80 83       	st	Z, r24
}
    3052:	cf 91       	pop	r28
    3054:	df 91       	pop	r29
    3056:	08 95       	ret

00003058 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    3058:	df 93       	push	r29
    305a:	cf 93       	push	r28
    305c:	0f 92       	push	r0
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3064:	eb e2       	ldi	r30, 0x2B	; 43
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	88 2f       	mov	r24, r24
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	80 72       	andi	r24, 0x20	; 32
    3070:	90 70       	andi	r25, 0x00	; 0
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	b9 f3       	breq	.-18     	; 0x3064 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    3076:	ec e2       	ldi	r30, 0x2C	; 44
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	89 81       	ldd	r24, Y+1	; 0x01
    307c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    307e:	0f 90       	pop	r0
    3080:	cf 91       	pop	r28
    3082:	df 91       	pop	r29
    3084:	08 95       	ret

00003086 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    308e:	eb e2       	ldi	r30, 0x2B	; 43
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	80 81       	ld	r24, Z
    3094:	88 23       	and	r24, r24
    3096:	dc f7       	brge	.-10     	; 0x308e <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    3098:	ec e2       	ldi	r30, 0x2C	; 44
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	80 81       	ld	r24, Z
}
    309e:	cf 91       	pop	r28
    30a0:	df 91       	pop	r29
    30a2:	08 95       	ret

000030a4 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <UART_sendString+0x6>
    30aa:	0f 92       	push	r0
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	9b 83       	std	Y+3, r25	; 0x03
    30b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30b4:	19 82       	std	Y+1, r1	; 0x01
    30b6:	0e c0       	rjmp	.+28     	; 0x30d4 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	28 2f       	mov	r18, r24
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
    30c0:	9b 81       	ldd	r25, Y+3	; 0x03
    30c2:	fc 01       	movw	r30, r24
    30c4:	e2 0f       	add	r30, r18
    30c6:	f3 1f       	adc	r31, r19
    30c8:	80 81       	ld	r24, Z
    30ca:	0e 94 2c 18 	call	0x3058	; 0x3058 <UART_sendByte>
		i++;
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	8f 5f       	subi	r24, 0xFF	; 255
    30d2:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	28 2f       	mov	r18, r24
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	8a 81       	ldd	r24, Y+2	; 0x02
    30dc:	9b 81       	ldd	r25, Y+3	; 0x03
    30de:	fc 01       	movw	r30, r24
    30e0:	e2 0f       	add	r30, r18
    30e2:	f3 1f       	adc	r31, r19
    30e4:	80 81       	ld	r24, Z
    30e6:	88 23       	and	r24, r24
    30e8:	39 f7       	brne	.-50     	; 0x30b8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	0f 90       	pop	r0
    30f0:	cf 91       	pop	r28
    30f2:	df 91       	pop	r29
    30f4:	08 95       	ret

000030f6 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    30f6:	0f 93       	push	r16
    30f8:	1f 93       	push	r17
    30fa:	df 93       	push	r29
    30fc:	cf 93       	push	r28
    30fe:	00 d0       	rcall	.+0      	; 0x3100 <UART_receiveString+0xa>
    3100:	0f 92       	push	r0
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
    3106:	9b 83       	std	Y+3, r25	; 0x03
    3108:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    310a:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	28 2f       	mov	r18, r24
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	8a 81       	ldd	r24, Y+2	; 0x02
    3114:	9b 81       	ldd	r25, Y+3	; 0x03
    3116:	8c 01       	movw	r16, r24
    3118:	02 0f       	add	r16, r18
    311a:	13 1f       	adc	r17, r19
    311c:	0e 94 43 18 	call	0x3086	; 0x3086 <UART_recieveByte>
    3120:	f8 01       	movw	r30, r16
    3122:	80 83       	st	Z, r24
    3124:	0f c0       	rjmp	.+30     	; 0x3144 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	8f 5f       	subi	r24, 0xFF	; 255
    312a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    312c:	89 81       	ldd	r24, Y+1	; 0x01
    312e:	28 2f       	mov	r18, r24
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	9b 81       	ldd	r25, Y+3	; 0x03
    3136:	8c 01       	movw	r16, r24
    3138:	02 0f       	add	r16, r18
    313a:	13 1f       	adc	r17, r19
    313c:	0e 94 43 18 	call	0x3086	; 0x3086 <UART_recieveByte>
    3140:	f8 01       	movw	r30, r16
    3142:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	28 2f       	mov	r18, r24
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	8a 81       	ldd	r24, Y+2	; 0x02
    314c:	9b 81       	ldd	r25, Y+3	; 0x03
    314e:	fc 01       	movw	r30, r24
    3150:	e2 0f       	add	r30, r18
    3152:	f3 1f       	adc	r31, r19
    3154:	80 81       	ld	r24, Z
    3156:	83 32       	cpi	r24, 0x23	; 35
    3158:	31 f7       	brne	.-52     	; 0x3126 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    315a:	89 81       	ldd	r24, Y+1	; 0x01
    315c:	28 2f       	mov	r18, r24
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	8a 81       	ldd	r24, Y+2	; 0x02
    3162:	9b 81       	ldd	r25, Y+3	; 0x03
    3164:	fc 01       	movw	r30, r24
    3166:	e2 0f       	add	r30, r18
    3168:	f3 1f       	adc	r31, r19
    316a:	10 82       	st	Z, r1
}
    316c:	0f 90       	pop	r0
    316e:	0f 90       	pop	r0
    3170:	0f 90       	pop	r0
    3172:	cf 91       	pop	r28
    3174:	df 91       	pop	r29
    3176:	1f 91       	pop	r17
    3178:	0f 91       	pop	r16
    317a:	08 95       	ret

0000317c <__prologue_saves__>:
    317c:	2f 92       	push	r2
    317e:	3f 92       	push	r3
    3180:	4f 92       	push	r4
    3182:	5f 92       	push	r5
    3184:	6f 92       	push	r6
    3186:	7f 92       	push	r7
    3188:	8f 92       	push	r8
    318a:	9f 92       	push	r9
    318c:	af 92       	push	r10
    318e:	bf 92       	push	r11
    3190:	cf 92       	push	r12
    3192:	df 92       	push	r13
    3194:	ef 92       	push	r14
    3196:	ff 92       	push	r15
    3198:	0f 93       	push	r16
    319a:	1f 93       	push	r17
    319c:	cf 93       	push	r28
    319e:	df 93       	push	r29
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	ca 1b       	sub	r28, r26
    31a6:	db 0b       	sbc	r29, r27
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	cd bf       	out	0x3d, r28	; 61
    31b2:	09 94       	ijmp

000031b4 <__epilogue_restores__>:
    31b4:	2a 88       	ldd	r2, Y+18	; 0x12
    31b6:	39 88       	ldd	r3, Y+17	; 0x11
    31b8:	48 88       	ldd	r4, Y+16	; 0x10
    31ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    31bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    31be:	7d 84       	ldd	r7, Y+13	; 0x0d
    31c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    31c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    31c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    31c6:	b9 84       	ldd	r11, Y+9	; 0x09
    31c8:	c8 84       	ldd	r12, Y+8	; 0x08
    31ca:	df 80       	ldd	r13, Y+7	; 0x07
    31cc:	ee 80       	ldd	r14, Y+6	; 0x06
    31ce:	fd 80       	ldd	r15, Y+5	; 0x05
    31d0:	0c 81       	ldd	r16, Y+4	; 0x04
    31d2:	1b 81       	ldd	r17, Y+3	; 0x03
    31d4:	aa 81       	ldd	r26, Y+2	; 0x02
    31d6:	b9 81       	ldd	r27, Y+1	; 0x01
    31d8:	ce 0f       	add	r28, r30
    31da:	d1 1d       	adc	r29, r1
    31dc:	0f b6       	in	r0, 0x3f	; 63
    31de:	f8 94       	cli
    31e0:	de bf       	out	0x3e, r29	; 62
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	cd bf       	out	0x3d, r28	; 61
    31e6:	ed 01       	movw	r28, r26
    31e8:	08 95       	ret

000031ea <itoa>:
    31ea:	fb 01       	movw	r30, r22
    31ec:	9f 01       	movw	r18, r30
    31ee:	e8 94       	clt
    31f0:	42 30       	cpi	r20, 0x02	; 2
    31f2:	c4 f0       	brlt	.+48     	; 0x3224 <itoa+0x3a>
    31f4:	45 32       	cpi	r20, 0x25	; 37
    31f6:	b4 f4       	brge	.+44     	; 0x3224 <itoa+0x3a>
    31f8:	4a 30       	cpi	r20, 0x0A	; 10
    31fa:	29 f4       	brne	.+10     	; 0x3206 <itoa+0x1c>
    31fc:	97 fb       	bst	r25, 7
    31fe:	1e f4       	brtc	.+6      	; 0x3206 <itoa+0x1c>
    3200:	90 95       	com	r25
    3202:	81 95       	neg	r24
    3204:	9f 4f       	sbci	r25, 0xFF	; 255
    3206:	64 2f       	mov	r22, r20
    3208:	77 27       	eor	r23, r23
    320a:	0e 94 26 19 	call	0x324c	; 0x324c <__udivmodhi4>
    320e:	80 5d       	subi	r24, 0xD0	; 208
    3210:	8a 33       	cpi	r24, 0x3A	; 58
    3212:	0c f0       	brlt	.+2      	; 0x3216 <itoa+0x2c>
    3214:	89 5d       	subi	r24, 0xD9	; 217
    3216:	81 93       	st	Z+, r24
    3218:	cb 01       	movw	r24, r22
    321a:	00 97       	sbiw	r24, 0x00	; 0
    321c:	a1 f7       	brne	.-24     	; 0x3206 <itoa+0x1c>
    321e:	16 f4       	brtc	.+4      	; 0x3224 <itoa+0x3a>
    3220:	5d e2       	ldi	r21, 0x2D	; 45
    3222:	51 93       	st	Z+, r21
    3224:	10 82       	st	Z, r1
    3226:	c9 01       	movw	r24, r18
    3228:	0c 94 16 19 	jmp	0x322c	; 0x322c <strrev>

0000322c <strrev>:
    322c:	dc 01       	movw	r26, r24
    322e:	fc 01       	movw	r30, r24
    3230:	67 2f       	mov	r22, r23
    3232:	71 91       	ld	r23, Z+
    3234:	77 23       	and	r23, r23
    3236:	e1 f7       	brne	.-8      	; 0x3230 <strrev+0x4>
    3238:	32 97       	sbiw	r30, 0x02	; 2
    323a:	04 c0       	rjmp	.+8      	; 0x3244 <strrev+0x18>
    323c:	7c 91       	ld	r23, X
    323e:	6d 93       	st	X+, r22
    3240:	70 83       	st	Z, r23
    3242:	62 91       	ld	r22, -Z
    3244:	ae 17       	cp	r26, r30
    3246:	bf 07       	cpc	r27, r31
    3248:	c8 f3       	brcs	.-14     	; 0x323c <strrev+0x10>
    324a:	08 95       	ret

0000324c <__udivmodhi4>:
    324c:	aa 1b       	sub	r26, r26
    324e:	bb 1b       	sub	r27, r27
    3250:	51 e1       	ldi	r21, 0x11	; 17
    3252:	07 c0       	rjmp	.+14     	; 0x3262 <__udivmodhi4_ep>

00003254 <__udivmodhi4_loop>:
    3254:	aa 1f       	adc	r26, r26
    3256:	bb 1f       	adc	r27, r27
    3258:	a6 17       	cp	r26, r22
    325a:	b7 07       	cpc	r27, r23
    325c:	10 f0       	brcs	.+4      	; 0x3262 <__udivmodhi4_ep>
    325e:	a6 1b       	sub	r26, r22
    3260:	b7 0b       	sbc	r27, r23

00003262 <__udivmodhi4_ep>:
    3262:	88 1f       	adc	r24, r24
    3264:	99 1f       	adc	r25, r25
    3266:	5a 95       	dec	r21
    3268:	a9 f7       	brne	.-22     	; 0x3254 <__udivmodhi4_loop>
    326a:	80 95       	com	r24
    326c:	90 95       	com	r25
    326e:	bc 01       	movw	r22, r24
    3270:	cd 01       	movw	r24, r26
    3272:	08 95       	ret

00003274 <_exit>:
    3274:	f8 94       	cli

00003276 <__stop_program>:
    3276:	ff cf       	rjmp	.-2      	; 0x3276 <__stop_program>
